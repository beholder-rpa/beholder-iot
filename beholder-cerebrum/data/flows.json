[
    {
        "id": "5b3b16f7b12de95a",
        "type": "tab",
        "label": "Cookie Clicker",
        "disabled": false,
        "info": ""
    },
    {
        "id": "13065b3553c3ca8f",
        "type": "tab",
        "label": "Global Events",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6a61b64910c046bc",
        "type": "tab",
        "label": "Debug",
        "disabled": false,
        "info": ""
    },
    {
        "id": "093549556932395f",
        "type": "subflow",
        "name": "Store Clicker",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 340,
                "wires": [
                    {
                        "id": "0af4bd966c7a2454"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 340,
                "wires": [
                    {
                        "id": "5218bcd9c9c06341",
                        "port": 0
                    }
                ]
            },
            {
                "x": 700,
                "y": 440,
                "wires": [
                    {
                        "id": "0af4bd966c7a2454",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "4d289f8513cee82f",
        "type": "subflow",
        "name": "determine if good cookie",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 140,
                "wires": [
                    {
                        "id": "61d91dd421e4d837"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 720,
                "y": 300,
                "wires": [
                    {
                        "id": "05b3caef80cd2ada",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1080,
                "y": 360,
                "wires": [
                    {
                        "id": "cec87ed245f42e30",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "dupe",
            "good"
        ]
    },
    {
        "id": "0b70dd4da53f0867",
        "type": "mqtt-broker",
        "name": "Beholder Nexus",
        "broker": "beholder-nexus",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "63cb76a5b524998b",
        "type": "mqtt in",
        "z": "13065b3553c3ca8f",
        "name": "on beholder service broadcast",
        "topic": "beholder/ctaf",
        "qos": "2",
        "datatype": "json",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 140,
        "y": 40,
        "wires": [
            [
                "21063c9ffa31504a"
            ]
        ]
    },
    {
        "id": "e1c18e4bdc5a93b3",
        "type": "debug",
        "z": "13065b3553c3ca8f",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 40,
        "wires": []
    },
    {
        "id": "21063c9ffa31504a",
        "type": "function",
        "z": "13065b3553c3ca8f",
        "name": "populate global services",
        "func": "const services = global.get(\"beholder_services\") || {};\n\nconst payload = msg.payload;\nif (payload.data) {\n    if (!services[payload.data.serviceName]) {\n       services[payload.data.serviceName] = [];\n    }\n    \n    const serviceHosts = services[payload.data.serviceName];\n    \n    if (!serviceHosts.includes(payload.data.hostName)) {\n        serviceHosts.push(payload.data.hostName);\n    }\n    global.set(\"beholder_services\", services);\n    node.log(JSON.stringify(services));\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 40,
        "wires": [
            [
                "e1c18e4bdc5a93b3"
            ]
        ]
    },
    {
        "id": "f8b145bf32508c97",
        "type": "mqtt in",
        "z": "13065b3553c3ca8f",
        "name": "on pointer position changed",
        "topic": "beholder/eye/+/pointer_position",
        "qos": "1",
        "datatype": "json",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 140,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "477da9ac4ee0c2c2",
        "type": "function",
        "z": "13065b3553c3ca8f",
        "name": "set global beholder_pointer_current_position",
        "func": "const payload = msg.payload;\nnode.status({text: `X: ${payload.data.x} Y: ${payload.data.y}`});\nglobal.set(\"beholder_pointer_current_position\", {\n    x: payload.data.x,\n    y: payload.data.y\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "d30bd1dcc177d9ae",
        "type": "mqtt in",
        "z": "13065b3553c3ca8f",
        "name": "on pointer position changed",
        "topic": "beholder/psionix/+/pointer_position",
        "qos": "1",
        "datatype": "json",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 140,
        "y": 180,
        "wires": [
            [
                "477da9ac4ee0c2c2"
            ]
        ]
    },
    {
        "id": "a911c0aa54a1e87d",
        "type": "jimp-image",
        "z": "13065b3553c3ca8f",
        "name": "",
        "data": "payload.data.image",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "",
        "parameter1Type": "msg",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 0,
        "jimpFunction": "none",
        "selectedJimpFunction": {
            "name": "none",
            "fn": "none",
            "description": "Just loads the image.",
            "parameters": []
        },
        "x": 1170,
        "y": 40,
        "wires": [
            [
                "565eb666df167810"
            ]
        ]
    },
    {
        "id": "0f2638177f9ba6bd",
        "type": "mqtt in",
        "z": "13065b3553c3ca8f",
        "d": true,
        "name": "on pointer image changed",
        "topic": "beholder/eye/+/pointer_image",
        "qos": "1",
        "datatype": "json",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 970,
        "y": 40,
        "wires": [
            [
                "a911c0aa54a1e87d"
            ]
        ]
    },
    {
        "id": "565eb666df167810",
        "type": "image viewer",
        "z": "13065b3553c3ca8f",
        "name": "",
        "width": "25",
        "data": "payload",
        "dataType": "msg",
        "active": true,
        "x": 1310,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "c0c6edf21f83149a",
        "type": "mqtt in",
        "z": "6a61b64910c046bc",
        "d": true,
        "name": "",
        "topic": "beholder/stalk/+/keyboard/+",
        "qos": "1",
        "datatype": "auto",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 220,
        "y": 160,
        "wires": [
            [
                "ec0798c50e445d70"
            ]
        ]
    },
    {
        "id": "ec0798c50e445d70",
        "type": "debug",
        "z": "6a61b64910c046bc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 160,
        "wires": []
    },
    {
        "id": "1ff5b7565811c8d9",
        "type": "mqtt in",
        "z": "6a61b64910c046bc",
        "d": true,
        "name": "",
        "topic": "beholder/stalk/+/mouse/+",
        "qos": "1",
        "datatype": "auto",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 230,
        "y": 80,
        "wires": [
            [
                "ec0798c50e445d70"
            ]
        ]
    },
    {
        "id": "e5a39b81f1ad5f54",
        "type": "mqtt in",
        "z": "6a61b64910c046bc",
        "name": "",
        "topic": "beholder/psionix/+/hotkeys/pressed/+",
        "qos": "1",
        "datatype": "auto",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 190,
        "y": 240,
        "wires": [
            [
                "ec0798c50e445d70"
            ]
        ]
    },
    {
        "id": "aaed171a3b2d7551",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 400,
        "wires": [
            [
                "f71baaefafd985bf"
            ]
        ]
    },
    {
        "id": "f71baaefafd985bf",
        "type": "send-keys",
        "z": "6a61b64910c046bc",
        "keys": "Asdf",
        "x": 340,
        "y": 400,
        "wires": [
            [
                "bde0df30871a605e"
            ]
        ]
    },
    {
        "id": "33a755ca2b8e0d61",
        "type": "register-hotkey",
        "z": "6a61b64910c046bc",
        "hostname": "",
        "modifiers": "^+",
        "key": "{Oemtilde}",
        "x": 320,
        "y": 460,
        "wires": [
            [
                "bde0df30871a605e"
            ]
        ]
    },
    {
        "id": "c4633543d6aa9823",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 460,
        "wires": [
            [
                "33a755ca2b8e0d61"
            ]
        ]
    },
    {
        "id": "f9802c3a1938bbb3",
        "type": "unregister-hotkey",
        "z": "6a61b64910c046bc",
        "hostname": "",
        "modifiers": "^+",
        "key": "{Oemtilde}",
        "x": 310,
        "y": 520,
        "wires": [
            [
                "bde0df30871a605e"
            ]
        ]
    },
    {
        "id": "b447b28f202f0c9b",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "f9802c3a1938bbb3"
            ]
        ]
    },
    {
        "id": "815fca67dc4f1df5",
        "type": "eye-start-observing",
        "z": "6a61b64910c046bc",
        "hostname": "",
        "adapterIndex": "0",
        "deviceIndex": "0",
        "regions": [],
        "streamDesktopThumbnail": "true",
        "streamPointerImage": "true",
        "desktopThumbnailStreamSettingsMaxFps": "0.5",
        "desktopThumbnailStreamSettingsScaleFactor": "0.15",
        "pointerImageStreamSettingsMaxFps": "0.5",
        "watchPointerPosition": "true",
        "x": 320,
        "y": 600,
        "wires": [
            [
                "bde0df30871a605e"
            ]
        ]
    },
    {
        "id": "7881dd5bb0fee994",
        "type": "stop-observing",
        "z": "6a61b64910c046bc",
        "hostname": "",
        "x": 320,
        "y": 660,
        "wires": [
            [
                "bde0df30871a605e"
            ]
        ]
    },
    {
        "id": "dd35fc2e379fa347",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 600,
        "wires": [
            [
                "815fca67dc4f1df5"
            ]
        ]
    },
    {
        "id": "039bee5fef1987c6",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 660,
        "wires": [
            [
                "7881dd5bb0fee994"
            ]
        ]
    },
    {
        "id": "c6fcf8d3ddce7ff0",
        "type": "remove-focus-region",
        "z": "6a61b64910c046bc",
        "hostname": "",
        "focusRegionName": "default",
        "x": 300,
        "y": 720,
        "wires": [
            [
                "bde0df30871a605e"
            ]
        ]
    },
    {
        "id": "8d700cf9c8bc3b71",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 720,
        "wires": [
            [
                "c6fcf8d3ddce7ff0"
            ]
        ]
    },
    {
        "id": "bde0df30871a605e",
        "type": "mqtt out",
        "z": "6a61b64910c046bc",
        "name": "Beholder Nexus",
        "topic": "",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0b70dd4da53f0867",
        "x": 640,
        "y": 420,
        "wires": []
    },
    {
        "id": "a452ecc746b49b31",
        "type": "mqtt out",
        "z": "5b3b16f7b12de95a",
        "name": "Beholder Nexus",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0b70dd4da53f0867",
        "x": 1660,
        "y": 820,
        "wires": []
    },
    {
        "id": "a20509f002b98de9",
        "type": "send-mouse-click",
        "z": "5b3b16f7b12de95a",
        "button": "lclick",
        "click_direction": 0,
        "duration": null,
        "x": 930,
        "y": 540,
        "wires": [
            [
                "a452ecc746b49b31"
            ]
        ]
    },
    {
        "id": "bb1f72790d7d12db",
        "type": "register-hotkey",
        "z": "5b3b16f7b12de95a",
        "hostname": "",
        "modifiers": "^+",
        "key": "{Oemtilde}",
        "x": 880,
        "y": 920,
        "wires": [
            [
                "a452ecc746b49b31"
            ]
        ]
    },
    {
        "id": "d47744512b474040",
        "type": "unregister-hotkey",
        "z": "5b3b16f7b12de95a",
        "hostname": "",
        "modifiers": "^+",
        "key": "{Oemtilde}",
        "x": 870,
        "y": 980,
        "wires": [
            [
                "a452ecc746b49b31"
            ]
        ]
    },
    {
        "id": "54677c7e9faec3c3",
        "type": "eye-start-observing",
        "z": "5b3b16f7b12de95a",
        "hostname": "",
        "adapterIndex": "0",
        "deviceIndex": "0",
        "regions": [],
        "streamDesktopThumbnail": "true",
        "streamPointerImage": "false",
        "desktopThumbnailStreamSettingsMaxFps": "0.5",
        "desktopThumbnailStreamSettingsScaleFactor": "0.15",
        "pointerImageStreamSettingsMaxFps": "0.5",
        "watchPointerPosition": "true",
        "x": 860,
        "y": 1080,
        "wires": [
            [
                "a452ecc746b49b31"
            ]
        ]
    },
    {
        "id": "a13940027781617e",
        "type": "stop-observing",
        "z": "5b3b16f7b12de95a",
        "hostname": "",
        "x": 860,
        "y": 1140,
        "wires": [
            [
                "a452ecc746b49b31"
            ]
        ]
    },
    {
        "id": "21d416d2262f1804",
        "type": "update-focus-region",
        "z": "5b3b16f7b12de95a",
        "hostname": "",
        "focusRegionName": "default",
        "focusRegionX": "200",
        "focusRegionY": "200",
        "focusRegionWidth": "640",
        "focusRegionHeight": "480",
        "focusRegionMaxFps": "0.15",
        "x": 980,
        "y": 820,
        "wires": [
            [
                "a452ecc746b49b31"
            ]
        ]
    },
    {
        "id": "b074feee2745ba5c",
        "type": "detect-object",
        "z": "5b3b16f7b12de95a",
        "queryImagePrefrontalKey": "",
        "targetImagePrefrontalKey": "",
        "matchRatioThreshold": 0.76,
        "scaleIncrement": 2,
        "rotationBins": 20,
        "outputImagePrefrontalKey": "",
        "x": 950,
        "y": 760,
        "wires": [
            [
                "a452ecc746b49b31"
            ]
        ]
    },
    {
        "id": "ca19638ec4477069",
        "type": "move-mouse-to",
        "z": "5b3b16f7b12de95a",
        "targetPositionX": "",
        "targetPositionY": "",
        "preMoveActions": "",
        "postMoveActions": "{lclick}",
        "movementSpeed": "3",
        "movementScaleX": "1.4",
        "movementScaleY": "1.4",
        "movementDelayMs": "",
        "x": 1240,
        "y": 380,
        "wires": [
            [
                "a452ecc746b49b31"
            ]
        ]
    },
    {
        "id": "099265f41f858ffa",
        "type": "inject",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 710,
        "y": 880,
        "wires": [
            [
                "bb1f72790d7d12db"
            ]
        ]
    },
    {
        "id": "7781cb1bfe5ed28d",
        "type": "switch",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "property": "payload.data.processName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Cookie Clicker",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 920,
        "wires": [
            [
                "ba7436256873acd9"
            ],
            []
        ]
    },
    {
        "id": "10186ee41eb9f51f",
        "type": "inject",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 690,
        "y": 980,
        "wires": [
            [
                "d47744512b474040"
            ]
        ]
    },
    {
        "id": "c38115727d154c75",
        "type": "inject",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 690,
        "y": 1040,
        "wires": [
            [
                "54677c7e9faec3c3"
            ]
        ]
    },
    {
        "id": "a9ddb07adc38a788",
        "type": "inject",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 670,
        "y": 1180,
        "wires": [
            [
                "a13940027781617e"
            ]
        ]
    },
    {
        "id": "f9b6966bc8513856",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "create focus region request for active process window",
        "func": "const payload = msg.payload;\nflow.set(\"cookie_clicker_process\", payload.data)\n\nreturn {\n    payload: {\n        name: \"default\",\n        kind: \"image\",\n        bitmapSettings: {\n            x: payload.data.windowPosition.x,\n            y: payload.data.windowPosition.y,\n            width: payload.data.windowPosition.width - 350,\n            height: payload.data.windowPosition.height,\n            maxFps: 0.25\n        }\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 820,
        "wires": [
            [
                "21d416d2262f1804"
            ]
        ]
    },
    {
        "id": "bcf433b5e9bab1fd",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "create detection request",
        "func": "\nreturn {\n    payload: {\n        queryImagePrefrontalKey: \"images%2FgoldCookie\",\n        targetImagePrefrontalKey: msg.payload.data.prefrontalImageKey,\n        matchMaskSettings: {\n          ratioThreshold: 0.76,\n          scaleIncrement: 2.0,\n          rotationBins: 20,\n        },\n        outputImagePrefrontalKey: null,\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 760,
        "wires": [
            [
                "b074feee2745ba5c"
            ]
        ]
    },
    {
        "id": "d66ef2ded60e78cb",
        "type": "switch",
        "z": "5b3b16f7b12de95a",
        "name": "state machine",
        "property": "cookie_clicker_state",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "idle",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "golden_cookie",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "spending_spree",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "hand_of_fate",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 400,
        "y": 560,
        "wires": [
            [
                "bee0b6cea281c197",
                "7de61ce12026042a",
                "cfd479fd322ea30f"
            ],
            [],
            [],
            [
                "fabef2d366ccf21f"
            ]
        ]
    },
    {
        "id": "3714332e699e79db",
        "type": "mqtt in",
        "z": "5b3b16f7b12de95a",
        "name": "on active process changed",
        "topic": "beholder/psionix/+/active_process_changed",
        "qos": "1",
        "datatype": "json",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 130,
        "y": 820,
        "wires": [
            [
                "99130e21a2a56664"
            ]
        ]
    },
    {
        "id": "317cd6185c5c2421",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "set target position to cookie position",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "cookie_position",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 300,
        "wires": [
            [
                "6de3353e96814b0b"
            ]
        ]
    },
    {
        "id": "d83c7c758a5df389",
        "type": "function",
        "z": "4d289f8513cee82f",
        "name": "get golden cookie midpoint",
        "func": "const polys = msg.payload.data;\nconst activeProcess = global.get(\"beholder_active_process\");\n\nif (!polys || polys.length === 0) {\n    return null;\n}\n\nif (!activeProcess) {\n    return null;\n}\n\nlet midpoints = [];\n\npolys.forEach((poly) => {\n    var mid = {\n        x: 0,\n        y: 0,\n    };\n\n    poly.points.forEach((point) => {\n        mid.x += point.x + activeProcess.windowPosition.x;\n        mid.y += point.y + activeProcess.windowPosition.y;\n    });\n    mid.x = Math.floor(mid.x / poly.points.length);\n    mid.y = Math.floor(mid.y / poly.points.length);\n    midpoints.push(mid);\n});\n\nnode.status({text: `X: ${midpoints[0].x} Y: ${midpoints[0].y}`});\n\nreturn {\n    payload: midpoints[0]\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 140,
        "wires": [
            [
                "85083e50b709ec34"
            ]
        ]
    },
    {
        "id": "e0a9264a325ca780",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "state",
        "func": "const state = flow.get(\"cookie_clicker_state\") || \"stopped\";\nnode.status({text: state});\nreturn {};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 560,
        "wires": [
            [
                "d66ef2ded60e78cb"
            ]
        ]
    },
    {
        "id": "6ef761fb1d0f644f",
        "type": "mqtt in",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "topic": "beholder/eye/+/region/+",
        "qos": "1",
        "datatype": "json",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 130,
        "y": 760,
        "wires": [
            [
                "a083be4aca3b4be7"
            ]
        ]
    },
    {
        "id": "e39d080b5092207c",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "set state to idle",
        "rules": [
            {
                "t": "set",
                "p": "cookie_clicker_state",
                "pt": "flow",
                "to": "idle",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 300,
        "wires": [
            [
                "317cd6185c5c2421"
            ]
        ]
    },
    {
        "id": "c1034286a85bf26a",
        "type": "inject",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 930,
        "y": 240,
        "wires": [
            [
                "317cd6185c5c2421"
            ]
        ]
    },
    {
        "id": "cec87ed245f42e30",
        "type": "change",
        "z": "4d289f8513cee82f",
        "name": "set state to golden cookie",
        "rules": [
            {
                "t": "set",
                "p": "$parent.cookie_clicker_state",
                "pt": "flow",
                "to": "golden_cookie",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "25954b9ad3459eed",
        "type": "inject",
        "z": "5b3b16f7b12de95a",
        "name": "loop",
        "props": [],
        "repeat": "0.1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 90,
        "y": 560,
        "wires": [
            [
                "e0a9264a325ca780",
                "19b5ecd572239ea7",
                "53683ee1a6f5a550"
            ]
        ]
    },
    {
        "id": "b7e9b05dec62e1d0",
        "type": "switch",
        "z": "5b3b16f7b12de95a",
        "name": "if cookie clicker is golden_cookie or idle",
        "property": "cookie_clicker_state",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "golden_cookie",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "idle",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 640,
        "y": 300,
        "wires": [
            [
                "e39d080b5092207c"
            ],
            [
                "e39d080b5092207c"
            ]
        ]
    },
    {
        "id": "61d91dd421e4d837",
        "type": "switch",
        "z": "4d289f8513cee82f",
        "name": "if cookie clicker is golden_cookie or idle",
        "property": "$parent.cookie_clicker_state",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "golden_cookie",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "idle",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "stopped",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 260,
        "y": 140,
        "wires": [
            [
                "d83c7c758a5df389"
            ],
            [
                "d83c7c758a5df389"
            ],
            []
        ]
    },
    {
        "id": "d03982fe055c45b7",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "increment golden cookie count",
        "func": "let cookieCount = flow.get(\"golden_cookie_click_count\") || 0;\ncookieCount++;\nflow.set(\"golden_cookie_click_count\", cookieCount);\nflow.set(\"last_golden_cookie\", new Date());\nnode.status({text: cookieCount});\nreturn {}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "19b5ecd572239ea7",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "big cookie location",
        "func": "const pos = flow.get(\"cookie_position\") || { x: 0, y: 0};\nnode.status({text: `X: ${pos.x} Y: ${pos.y}`});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "eae5f482832ae37c",
        "type": "switch",
        "z": "5b3b16f7b12de95a",
        "name": "detected count",
        "property": "payload.data.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 320,
        "y": 200,
        "wires": [
            [
                "b7e9b05dec62e1d0",
                "7095d80831f40f1f"
            ],
            [
                "9c4d192a3ffcc585",
                "86a028630078d835"
            ]
        ]
    },
    {
        "id": "1ad67a9ed3472606",
        "type": "mqtt in",
        "z": "5b3b16f7b12de95a",
        "name": "on detected cookies",
        "topic": "beholder/occipital/+/detected_objects/images%2FgoldCookie",
        "qos": "1",
        "datatype": "json",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 110,
        "y": 200,
        "wires": [
            [
                "eae5f482832ae37c"
            ]
        ]
    },
    {
        "id": "7095d80831f40f1f",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "= 0 - set TTS msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "no cookies found :(",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 160,
        "wires": [
            [
                "53165ee276212aa6"
            ]
        ]
    },
    {
        "id": "9c4d192a3ffcc585",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "> 0 - set TTS msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Oh look, it's a golden cookie!",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 220,
        "wires": [
            [
                "53165ee276212aa6"
            ]
        ]
    },
    {
        "id": "53165ee276212aa6",
        "type": "rbe",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 910,
        "y": 160,
        "wires": [
            [
                "3db1e1b770048671"
            ]
        ]
    },
    {
        "id": "3db1e1b770048671",
        "type": "play audio",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "voice": "49",
        "x": 1230,
        "y": 80,
        "wires": []
    },
    {
        "id": "b753cf068a58b8de",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "active - set TTS msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "clicker enabled",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 40,
        "wires": [
            [
                "3db1e1b770048671"
            ]
        ]
    },
    {
        "id": "1c9be2895eab85d8",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "inactive- set TTS msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "clicker disabled",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 100,
        "wires": [
            [
                "3db1e1b770048671"
            ]
        ]
    },
    {
        "id": "47619e55c4a24c53",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "set known cookie position",
        "rules": [
            {
                "t": "set",
                "p": "cookie_position",
                "pt": "flow",
                "to": "beholder_pointer_current_position",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 40,
        "wires": [
            [
                "b753cf068a58b8de"
            ]
        ]
    },
    {
        "id": "0cad2766305c17d0",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "clear known cookie position",
        "rules": [
            {
                "t": "delete",
                "p": "cookie_position",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 100,
        "wires": [
            [
                "1c9be2895eab85d8"
            ]
        ]
    },
    {
        "id": "920b2c520ff14543",
        "type": "switch",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "property": "cookie_clicker_state",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "idle",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "stopped",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 80,
        "wires": [
            [
                "47619e55c4a24c53"
            ],
            [
                "0cad2766305c17d0"
            ]
        ]
    },
    {
        "id": "430fb44bf0d54d7a",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "toggle clicker",
        "func": "let state = flow.get(\"cookie_clicker_state\") || \"stopped\";\n\nif (state === \"stopped\") {\n    state = 'idle';\n} else {\n    state = 'stopped';\n    flow.set(\"cookie_clicker_click_count\", 0);\n}\n\nflow.set(\"cookie_clicker_state\", state);\n\nreturn {\n    payload: state\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 80,
        "wires": [
            [
                "920b2c520ff14543"
            ]
        ]
    },
    {
        "id": "6437fd87ade54ba3",
        "type": "mqtt in",
        "z": "5b3b16f7b12de95a",
        "name": "on ctrl-shift-tilde",
        "topic": "beholder/psionix/+/hotkeys/pressed/Xit7T2VtdGlsZGV9",
        "qos": "1",
        "datatype": "auto",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 100,
        "y": 40,
        "wires": [
            [
                "430fb44bf0d54d7a"
            ]
        ]
    },
    {
        "id": "b81eac771a546196",
        "type": "inject",
        "z": "5b3b16f7b12de95a",
        "name": "manual toggle",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "430fb44bf0d54d7a"
            ]
        ]
    },
    {
        "id": "a083be4aca3b4be7",
        "type": "throttle",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "throttleType": "time",
        "timeLimit": ".5",
        "timeLimitType": "seconds",
        "countLimit": 0,
        "blockSize": 0,
        "locked": false,
        "x": 360,
        "y": 760,
        "wires": [
            [
                "bcf433b5e9bab1fd"
            ]
        ]
    },
    {
        "id": "53683ee1a6f5a550",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "current mouse location",
        "func": "const pos = global.get(\"beholder_pointer_current_position\") || 0;\nnode.status({text: `X: ${pos.x} Y: ${pos.y}`});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "794fe92066ef8ace",
        "type": "mqtt in",
        "z": "13065b3553c3ca8f",
        "name": "on active process changed",
        "topic": "beholder/psionix/+/active_process_changed",
        "qos": "1",
        "datatype": "json",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 150,
        "y": 260,
        "wires": [
            [
                "c44c213017bc5f6d"
            ]
        ]
    },
    {
        "id": "c44c213017bc5f6d",
        "type": "function",
        "z": "13065b3553c3ca8f",
        "name": "set global beholder_active_process",
        "func": "const payload = msg.payload;\nif (!payload.data) {\n    return null;\n}\nnode.status({text: `${payload.data.processName} - X: ${payload.data.windowPosition.x} Y: ${payload.data.windowPosition.y} Width: ${payload.data.windowPosition.width} Height: ${payload.data.windowPosition.height}`});\nglobal.set(\"beholder_active_process\", payload.data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "99130e21a2a56664",
        "type": "rbe",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload.data.processName",
        "topi": "topic",
        "x": 330,
        "y": 820,
        "wires": [
            [
                "f9b6966bc8513856",
                "7781cb1bfe5ed28d"
            ]
        ]
    },
    {
        "id": "d09ada59b2398114",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "set movement ",
        "func": "\nreturn {\n    payload: {\n          current_position: null,\n          target_position: msg.payload,\n          movement_type: 0,\n          movement_speed: 4,\n          movement_scale_x: 1,\n          movement_scale_y: 1,\n          movement_delay_ms: 0,\n          pre_move_actions: \"\",\n          post_move_actions: \"{lclick}\",\n        }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 380,
        "wires": [
            [
                "ca19638ec4477069"
            ]
        ]
    },
    {
        "id": "5dfbc808a4b753e7",
        "type": "inject",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 530,
        "y": 740,
        "wires": [
            [
                "0b117ae57c8296b2"
            ]
        ]
    },
    {
        "id": "0b117ae57c8296b2",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "set state to shopping_spree",
        "rules": [
            {
                "t": "set",
                "p": "cookie_clicker_state",
                "pt": "flow",
                "to": "shopping_spree",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 680,
        "wires": [
            [
                "4485aebd18d852d2"
            ]
        ]
    },
    {
        "id": "bee0b6cea281c197",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "on the big cookie",
        "func": "const cookiePos = flow.get(\"cookie_position\");\nconst cursorPos = global.get(\"beholder_pointer_current_position\") || 0;\n\nlet clickCount = flow.get(\"cookie_clicker_click_count\") || 0;\n\nif (!cookiePos || !cursorPos) {\n    node.status({fill: 'red', text: `clicks: ${clickCount}`});\n    return null;\n}\n\nif (\n    (cursorPos.x < (cookiePos.x + 75)) &&\n    (cursorPos.x > (cookiePos.x - 75)) &&\n    (cursorPos.y < (cookiePos.y + 75)) &&\n    (cursorPos.y > (cookiePos.y - 75))\n   ) {\n       clickCount++;\n       flow.set(\"cookie_clicker_click_count\", clickCount);\n\n       node.status({fill: 'green', text: `clicks: ${clickCount}`});\n       return msg;\n   }\n\nnode.status({fill: 'red', text: `clicks: ${clickCount}`});\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 540,
        "wires": [
            [
                "a20509f002b98de9"
            ]
        ]
    },
    {
        "id": "2ffc1fe1d1661d78",
        "type": "subflow:093549556932395f",
        "z": "5b3b16f7b12de95a",
        "name": "click items in store",
        "env": [],
        "x": 1350,
        "y": 680,
        "wires": [
            [
                "a452ecc746b49b31"
            ],
            [
                "ac8819d740727ef6"
            ]
        ]
    },
    {
        "id": "d852d5e7d14e458f",
        "type": "change",
        "z": "093549556932395f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "$parent.cookie_clicker_state",
                "pt": "flow",
                "to": "idle",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "de25f883adb8526d",
        "type": "delay",
        "z": "093549556932395f",
        "name": "",
        "pauseType": "delay",
        "timeout": "750",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 730,
        "y": 240,
        "wires": [
            [
                "d852d5e7d14e458f"
            ]
        ]
    },
    {
        "id": "5218bcd9c9c06341",
        "type": "move-mouse-to",
        "z": "093549556932395f",
        "targetPositionX": "",
        "targetPositionY": "",
        "preMoveActions": "",
        "postMoveActions": "{lclick}",
        "movementSpeed": "3",
        "movementScaleX": "1.4",
        "movementScaleY": "1.4",
        "movementDelayMs": "",
        "x": 540,
        "y": 340,
        "wires": [
            [
                "de25f883adb8526d"
            ]
        ]
    },
    {
        "id": "ba7436256873acd9",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 920,
        "wires": [
            [
                "bb1f72790d7d12db",
                "54677c7e9faec3c3"
            ]
        ]
    },
    {
        "id": "85083e50b709ec34",
        "type": "function",
        "z": "4d289f8513cee82f",
        "name": "check for dupe",
        "func": "const lastCookiePos = flow.get('last_golden_cookie_pos');\nconst newCookiePos = msg.payload;\n\nif (!lastCookiePos) {\n    flow.set('last_golden_cookie_pos', newCookiePos);\n    return msg;\n}\n\nconst range = 15;\n\nif (\n    (newCookiePos.x < (lastCookiePos.x + range)) &&\n    (newCookiePos.x > (lastCookiePos.x - range)) &&\n    (newCookiePos.y < (lastCookiePos.y + range)) &&\n    (newCookiePos.y > (lastCookiePos.y - range))\n   ) {\n       return {\n           payload: null\n       };\n   }\n\nflow.set('last_golden_cookie_pos', newCookiePos);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 140,
        "wires": [
            [
                "05b3caef80cd2ada"
            ]
        ]
    },
    {
        "id": "0deb7194453e647f",
        "type": "function",
        "z": "6a61b64910c046bc",
        "name": "reset",
        "func": "\nreturn {\n    payload: {\n          current_position: null,\n          target_position: { x: 0, y: 0 },\n          movement_type: 0,\n          movement_speed: 1,\n          movement_scale_x: 1,\n          movement_scale_y: 1,\n          movement_delay_ms: 0,\n          pre_move_actions: \"\",\n          post_move_actions: \"{lclick}\",\n        }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 800,
        "wires": [
            [
                "cba4a5bc08b9e565"
            ]
        ]
    },
    {
        "id": "cba4a5bc08b9e565",
        "type": "move-mouse-to",
        "z": "6a61b64910c046bc",
        "targetPositionX": "",
        "targetPositionY": "",
        "preMoveActions": "",
        "postMoveActions": "{lclick}",
        "movementSpeed": "3",
        "movementScaleX": "1.4",
        "movementScaleY": "1.4",
        "movementDelayMs": "",
        "x": 580,
        "y": 800,
        "wires": [
            [
                "bde0df30871a605e"
            ]
        ]
    },
    {
        "id": "065e45722df9cbe8",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 800,
        "wires": [
            [
                "0deb7194453e647f"
            ]
        ]
    },
    {
        "id": "41eec896c41e8b33",
        "type": "function",
        "z": "6a61b64910c046bc",
        "name": "set movement x1",
        "func": "\nreturn {\n    payload: {\n          current_position: null,\n          target_position: { x: 1000, y: 1000 },\n          movement_type: 0,\n          movement_speed: 1,\n          movement_scale_x: 1,\n          movement_scale_y: 1,\n          movement_delay_ms: 0,\n          pre_move_actions: \"\",\n          post_move_actions: \"\",\n          points_topic: \"beholder/points\"\n        }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 860,
        "wires": [
            [
                "cba4a5bc08b9e565"
            ]
        ]
    },
    {
        "id": "97ee88f55af769a2",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 860,
        "wires": [
            [
                "41eec896c41e8b33"
            ]
        ]
    },
    {
        "id": "f51b644360f1b573",
        "type": "function",
        "z": "6a61b64910c046bc",
        "name": "set movement ",
        "func": "\nreturn {\n    payload: {\n          current_position: null,\n          target_position: { x: 2000, y: 1000 },\n          movement_type: 0,\n          movement_speed: 1,\n          movement_scale_x: 1,\n          movement_scale_y: 1,\n          movement_delay_ms: 0,\n          pre_move_actions: \"\",\n          post_move_actions: \"\",\n        }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1240,
        "wires": [
            [
                "cba4a5bc08b9e565"
            ]
        ]
    },
    {
        "id": "7117d407c75fa546",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1240,
        "wires": [
            [
                "f51b644360f1b573"
            ]
        ]
    },
    {
        "id": "6de3353e96814b0b",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "if not on the big cookie, move",
        "func": "const cookiePos = flow.get(\"cookie_position\");\nconst cursorPos = global.get(\"beholder_pointer_current_position\") || 0;\nnode.status({text: `X: ${cursorPos.x} Y: ${cursorPos.y}`});\n\nif (!cookiePos || !cursorPos) {\n    return null;\n}\n\nif (\n    (cursorPos.x < (cookiePos.x + 75)) &&\n    (cursorPos.x > (cookiePos.x - 75)) &&\n    (cursorPos.y < (cookiePos.y + 75)) &&\n    (cursorPos.y > (cookiePos.y - 75))\n   ) {\n       return null;\n   }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 300,
        "wires": [
            [
                "d09ada59b2398114"
            ]
        ]
    },
    {
        "id": "795a1a536a854748",
        "type": "mqtt in",
        "z": "6a61b64910c046bc",
        "name": "",
        "topic": "beholder/points",
        "qos": "1",
        "datatype": "auto",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 820,
        "y": 160,
        "wires": [
            [
                "0f74733491ec5331"
            ]
        ]
    },
    {
        "id": "0f74733491ec5331",
        "type": "debug",
        "z": "6a61b64910c046bc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 160,
        "wires": []
    },
    {
        "id": "dfc59881fe83612a",
        "type": "function",
        "z": "6a61b64910c046bc",
        "name": "current pointer position",
        "func": "const payload = msg.payload;\nnode.status({text: `X: ${payload.data.x} Y: ${payload.data.y}`});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "d2f4a73d292524b3",
        "type": "mqtt in",
        "z": "6a61b64910c046bc",
        "name": "on pointer position changed",
        "topic": "beholder/psionix/+/pointer_position",
        "qos": "1",
        "datatype": "json",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 780,
        "y": 40,
        "wires": [
            [
                "dfc59881fe83612a"
            ]
        ]
    },
    {
        "id": "0439c5ecb5a44c02",
        "type": "function",
        "z": "6a61b64910c046bc",
        "name": "set movement x2",
        "func": "\nreturn {\n    payload: {\n          current_position: null,\n          target_position: { x: 1000, y: 1000 },\n          movement_type: 0,\n          movement_speed: 2,\n          movement_scale_x: 1,\n          movement_scale_y: 1,\n          movement_delay_ms: 0,\n          pre_move_actions: \"\",\n          post_move_actions: \"\",\n          points_topic: \"beholder/points\"\n        }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 920,
        "wires": [
            [
                "cba4a5bc08b9e565"
            ]
        ]
    },
    {
        "id": "6d1e3d59fb73a87b",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 920,
        "wires": [
            [
                "0439c5ecb5a44c02"
            ]
        ]
    },
    {
        "id": "020fb4472c47f7f8",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 980,
        "wires": [
            [
                "31c15119bb66828b"
            ]
        ]
    },
    {
        "id": "31c15119bb66828b",
        "type": "function",
        "z": "6a61b64910c046bc",
        "name": "set movement x3",
        "func": "\nreturn {\n    payload: {\n          current_position: null,\n          target_position: { x: 1000, y: 1000 },\n          movement_type: 0,\n          movement_speed: 3,\n          movement_scale_x: 1,\n          movement_scale_y: 1,\n          movement_delay_ms: 0,\n          pre_move_actions: \"\",\n          post_move_actions: \"\",\n          points_topic: \"beholder/points\"\n        }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 980,
        "wires": [
            [
                "cba4a5bc08b9e565"
            ]
        ]
    },
    {
        "id": "a9b5fe072f130b4a",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1040,
        "wires": [
            [
                "4260a2cc1d5e73a8"
            ]
        ]
    },
    {
        "id": "4260a2cc1d5e73a8",
        "type": "function",
        "z": "6a61b64910c046bc",
        "name": "set movement x4",
        "func": "\nreturn {\n    payload: {\n          current_position: null,\n          target_position: { x: 1000, y: 1000 },\n          movement_type: 0,\n          movement_speed: 4,\n          movement_scale_x: 1,\n          movement_scale_y: 1,\n          movement_delay_ms: 0,\n          pre_move_actions: \"\",\n          post_move_actions: \"\",\n          points_topic: \"beholder/points\"\n        }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1040,
        "wires": [
            [
                "cba4a5bc08b9e565"
            ]
        ]
    },
    {
        "id": "e41f8957a576fb9b",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1160,
        "wires": [
            [
                "6f8c7aa0f65a95af"
            ]
        ]
    },
    {
        "id": "6f8c7aa0f65a95af",
        "type": "function",
        "z": "6a61b64910c046bc",
        "name": "set movement x6",
        "func": "\nreturn {\n    payload: {\n          current_position: null,\n          target_position: { x: 1000, y: 1000 },\n          movement_type: 0,\n          movement_speed: 6,\n          movement_scale_x: 1,\n          movement_scale_y: 1,\n          movement_delay_ms: 0,\n          pre_move_actions: \"\",\n          post_move_actions: \"\",\n          points_topic: \"beholder/points\"\n        }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1160,
        "wires": [
            [
                "cba4a5bc08b9e565"
            ]
        ]
    },
    {
        "id": "0234167cd4ec169e",
        "type": "function",
        "z": "6a61b64910c046bc",
        "name": "set movement x5",
        "func": "\nreturn {\n    payload: {\n          current_position: null,\n          target_position: { x: 1000, y: 1000 },\n          movement_type: 0,\n          movement_speed: 5,\n          movement_scale_x: 1,\n          movement_scale_y: 1,\n          movement_delay_ms: 0,\n          pre_move_actions: \"\",\n          post_move_actions: \"\",\n          points_topic: \"beholder/points\"\n        }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1100,
        "wires": [
            [
                "cba4a5bc08b9e565"
            ]
        ]
    },
    {
        "id": "2613b23a321fe317",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1100,
        "wires": [
            [
                "0234167cd4ec169e"
            ]
        ]
    },
    {
        "id": "c510c1f1e9a97ccd",
        "type": "function",
        "z": "093549556932395f",
        "name": "create movement",
        "func": "const cookieClickerProcess = flow.get(\"$parent.cookie_clicker_process\");\nif (!cookieClickerProcess) {\n    return;\n}\n\n\nreturn {\n    payload: {\n      current_position: null,\n      target_position: {\n            x: cookieClickerProcess.windowPosition.width - 175,\n            y: cookieClickerProcess.windowPosition.y + 230 + (msg.payload * 62),\n        },\n      movement_type: 0,\n      movement_speed: 4,\n      movement_scale_x: 1,\n      movement_scale_y: 1,\n      movement_delay_ms: 0,\n      pre_move_actions: \"\",\n      post_move_actions: \"{lclick}\",\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 340,
        "wires": [
            [
                "5218bcd9c9c06341"
            ]
        ]
    },
    {
        "id": "0af4bd966c7a2454",
        "type": "random",
        "z": "093549556932395f",
        "name": "",
        "low": "0",
        "high": "13",
        "inte": "true",
        "property": "payload",
        "x": 160,
        "y": 340,
        "wires": [
            [
                "c510c1f1e9a97ccd"
            ]
        ]
    },
    {
        "id": "4485aebd18d852d2",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "shopping - set TTS msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "let's go shopping!",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1090,
        "y": 680,
        "wires": [
            [
                "2ffc1fe1d1661d78",
                "3db1e1b770048671"
            ]
        ]
    },
    {
        "id": "7de61ce12026042a",
        "type": "random",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "low": 1,
        "high": "750",
        "inte": "true",
        "property": "payload",
        "x": 240,
        "y": 680,
        "wires": [
            [
                "7c16802ce7d64fad"
            ]
        ]
    },
    {
        "id": "7c16802ce7d64fad",
        "type": "switch",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 680,
        "wires": [
            [
                "e6e02ff77f9a16f6"
            ]
        ]
    },
    {
        "id": "e6e02ff77f9a16f6",
        "type": "throttle",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "throttleType": "time",
        "timeLimit": "30",
        "timeLimitType": "seconds",
        "countLimit": 0,
        "blockSize": 0,
        "locked": false,
        "x": 540,
        "y": 680,
        "wires": [
            [
                "0b117ae57c8296b2"
            ]
        ]
    },
    {
        "id": "cfd479fd322ea30f",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "recently clicked on cookie",
        "func": "const lastGoldenCookie = flow.get(\"last_golden_cookie\");\n\nif (!lastGoldenCookie) {\n    return null;\n}\n\nconst diff = (new Date()) - lastGoldenCookie;\nnode.status({text: diff / 1000});\n\nif (diff <= 3000) {\n    return {\n        payload: diff,\n    }\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 480,
        "wires": [
            [
                "9387d0e01d441108"
            ]
        ]
    },
    {
        "id": "ac8819d740727ef6",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "set purchase TTS",
        "func": "const items = [\n    'Cursor',\n    'Grandma',\n    'Farm',\n    'Mine',\n    'Factory',\n    'Bank',\n    'Temple',\n    'Wizard Tower',\n    'Shipment',\n    'Alchemy Lab',\n    'Portal',\n    'Time Machine',\n    'Antimatter Condenser',\n    'Prism',\n];\n\nreturn {\n    payload: `bought a ${items[msg.payload]}`\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 240,
        "wires": [
            [
                "3db1e1b770048671"
            ]
        ]
    },
    {
        "id": "05b3caef80cd2ada",
        "type": "switch",
        "z": "4d289f8513cee82f",
        "name": "is dupe",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 600,
        "y": 360,
        "wires": [
            [],
            [
                "cec87ed245f42e30",
                "e5848c5ba7ee0fdd"
            ]
        ]
    },
    {
        "id": "e5848c5ba7ee0fdd",
        "type": "delay",
        "z": "4d289f8513cee82f",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 940,
        "y": 280,
        "wires": [
            [
                "923f20f76bee541e"
            ]
        ]
    },
    {
        "id": "923f20f76bee541e",
        "type": "change",
        "z": "4d289f8513cee82f",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "last_golden_cookie_pos",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "86a028630078d835",
        "type": "subflow:4d289f8513cee82f",
        "z": "5b3b16f7b12de95a",
        "x": 290,
        "y": 320,
        "wires": [
            [
                "b7e9b05dec62e1d0"
            ],
            [
                "d03982fe055c45b7",
                "d09ada59b2398114"
            ]
        ]
    },
    {
        "id": "d9ca6579edf19e7b",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "set state to hand_of_fate",
        "rules": [
            {
                "t": "set",
                "p": "cookie_clicker_state",
                "pt": "flow",
                "to": "hand_of_fate",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "fabef2d366ccf21f",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "move to hand of fate",
        "func": "const lastHandOfFate = flow.get(\"last_hand_of_fate\");\nif (lastHandOfFate) {\n    const diff = (new Date()) - lastHandOfFate;\n    node.status({text: diff / 1000});\n}\n\nif (lastHandOfFate) {\n    const hofDiff = (new Date()) - lastHandOfFate;\n    if (hofDiff <= 5 * 60 * 1000) {\n        flow.set(\"cookie_clicker_state\", \"idle\")\n        return null;\n    }\n}\n\n\nreturn {\n    payload: {\n        x: 900,\n        y: 1090\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 600,
        "wires": [
            [
                "4a0267f0f443486a",
                "aa48b956f274aa14",
                "d09ada59b2398114"
            ]
        ]
    },
    {
        "id": "4a0267f0f443486a",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "set state to idle",
        "rules": [
            {
                "t": "set",
                "p": "last_hand_of_fate",
                "pt": "flow",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "cookie_clicker_state",
                "pt": "flow",
                "to": "idle",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "aa48b956f274aa14",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "set HOF TTS",
        "func": "return {\n    payload: `tempting the hand of fate`\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 180,
        "wires": [
            [
                "3db1e1b770048671"
            ]
        ]
    },
    {
        "id": "9387d0e01d441108",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "hand of fate is available",
        "func": "const lastHandOfFate = flow.get(\"last_hand_of_fate\");\n\nif (lastHandOfFate) {\n    const hofDiff = (new Date()) - lastHandOfFate;\n    node.status({text: hofDiff / 1000});\n    if (hofDiff <= 5 * 60 * 1000) {\n        return null;\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 480,
        "wires": [
            [
                "d9ca6579edf19e7b"
            ]
        ]
    }
]