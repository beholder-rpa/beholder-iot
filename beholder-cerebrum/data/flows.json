[
    {
        "id": "5b3b16f7b12de95a",
        "type": "tab",
        "label": "Cookie Clicker",
        "disabled": false,
        "info": ""
    },
    {
        "id": "13065b3553c3ca8f",
        "type": "tab",
        "label": "Global Events",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6a61b64910c046bc",
        "type": "tab",
        "label": "Debug",
        "disabled": false,
        "info": ""
    },
    {
        "id": "0b70dd4da53f0867",
        "type": "mqtt-broker",
        "name": "Beholder Nexus",
        "broker": "beholder-nexus",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "63cb76a5b524998b",
        "type": "mqtt in",
        "z": "13065b3553c3ca8f",
        "name": "on beholder service broadcast",
        "topic": "beholder/ctaf",
        "qos": "2",
        "datatype": "json",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 140,
        "y": 40,
        "wires": [
            [
                "21063c9ffa31504a"
            ]
        ]
    },
    {
        "id": "e1c18e4bdc5a93b3",
        "type": "debug",
        "z": "13065b3553c3ca8f",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 40,
        "wires": []
    },
    {
        "id": "21063c9ffa31504a",
        "type": "function",
        "z": "13065b3553c3ca8f",
        "name": "populate global services",
        "func": "const services = global.get(\"beholder_services\") || {};\n\nconst payload = msg.payload;\nif (payload.data) {\n    if (!services[payload.data.serviceName]) {\n       services[payload.data.serviceName] = [];\n    }\n    \n    const serviceHosts = services[payload.data.serviceName];\n    \n    if (!serviceHosts.includes(payload.data.hostName)) {\n        serviceHosts.push(payload.data.hostName);\n    }\n    global.set(\"beholder_services\", services);\n    node.log(JSON.stringify(services));\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 40,
        "wires": [
            [
                "e1c18e4bdc5a93b3"
            ]
        ]
    },
    {
        "id": "f8b145bf32508c97",
        "type": "mqtt in",
        "z": "13065b3553c3ca8f",
        "name": "on pointer position changed",
        "topic": "beholder/eye/+/pointer_position",
        "qos": "1",
        "datatype": "json",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 140,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "477da9ac4ee0c2c2",
        "type": "function",
        "z": "13065b3553c3ca8f",
        "name": "set global beholder_pointer_current_position",
        "func": "const payload = msg.payload;\nnode.status({text: `X: ${payload.data.x} Y: ${payload.data.y}`});\nglobal.set(\"beholder_pointer_current_position\", {\n    x: payload.data.x,\n    y: payload.data.y\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "d30bd1dcc177d9ae",
        "type": "mqtt in",
        "z": "13065b3553c3ca8f",
        "name": "on pointer position changed",
        "topic": "beholder/psionix/+/pointer_position",
        "qos": "1",
        "datatype": "json",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 140,
        "y": 180,
        "wires": [
            [
                "477da9ac4ee0c2c2"
            ]
        ]
    },
    {
        "id": "a911c0aa54a1e87d",
        "type": "jimp-image",
        "z": "13065b3553c3ca8f",
        "name": "",
        "data": "payload.data.image",
        "dataType": "msg",
        "ret": "img",
        "parameter1": "",
        "parameter1Type": "msg",
        "parameter2": "",
        "parameter2Type": "msg",
        "parameter3": "",
        "parameter3Type": "msg",
        "parameter4": "",
        "parameter4Type": "msg",
        "parameter5": "",
        "parameter5Type": "msg",
        "parameter6": "",
        "parameter6Type": "msg",
        "parameter7": "",
        "parameter7Type": "msg",
        "parameter8": "",
        "parameter8Type": "msg",
        "sendProperty": "payload",
        "sendPropertyType": "msg",
        "parameterCount": 0,
        "jimpFunction": "none",
        "selectedJimpFunction": {
            "name": "none",
            "fn": "none",
            "description": "Just loads the image.",
            "parameters": []
        },
        "x": 1170,
        "y": 40,
        "wires": [
            [
                "565eb666df167810"
            ]
        ]
    },
    {
        "id": "0f2638177f9ba6bd",
        "type": "mqtt in",
        "z": "13065b3553c3ca8f",
        "d": true,
        "name": "on pointer image changed",
        "topic": "beholder/eye/+/pointer_image",
        "qos": "1",
        "datatype": "json",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 970,
        "y": 40,
        "wires": [
            [
                "a911c0aa54a1e87d"
            ]
        ]
    },
    {
        "id": "565eb666df167810",
        "type": "image viewer",
        "z": "13065b3553c3ca8f",
        "name": "",
        "width": "25",
        "data": "payload",
        "dataType": "msg",
        "active": true,
        "x": 1310,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "c0c6edf21f83149a",
        "type": "mqtt in",
        "z": "6a61b64910c046bc",
        "d": true,
        "name": "",
        "topic": "beholder/stalk/+/keyboard/+",
        "qos": "1",
        "datatype": "auto",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 220,
        "y": 100,
        "wires": [
            [
                "ec0798c50e445d70"
            ]
        ]
    },
    {
        "id": "ec0798c50e445d70",
        "type": "debug",
        "z": "6a61b64910c046bc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 160,
        "wires": []
    },
    {
        "id": "1ff5b7565811c8d9",
        "type": "mqtt in",
        "z": "6a61b64910c046bc",
        "d": true,
        "name": "",
        "topic": "beholder/stalk/+/mouse/+",
        "qos": "1",
        "datatype": "auto",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 230,
        "y": 40,
        "wires": [
            [
                "ec0798c50e445d70"
            ]
        ]
    },
    {
        "id": "e5a39b81f1ad5f54",
        "type": "mqtt in",
        "z": "6a61b64910c046bc",
        "name": "",
        "topic": "beholder/psionix/+/hotkeys/pressed/+",
        "qos": "1",
        "datatype": "auto",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 190,
        "y": 240,
        "wires": [
            [
                "ec0798c50e445d70"
            ]
        ]
    },
    {
        "id": "aaed171a3b2d7551",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 400,
        "wires": [
            [
                "f71baaefafd985bf"
            ]
        ]
    },
    {
        "id": "f71baaefafd985bf",
        "type": "send-keys",
        "z": "6a61b64910c046bc",
        "keys": "Asdf",
        "x": 340,
        "y": 400,
        "wires": [
            [
                "bde0df30871a605e"
            ]
        ]
    },
    {
        "id": "33a755ca2b8e0d61",
        "type": "register-hotkey",
        "z": "6a61b64910c046bc",
        "hostname": "",
        "modifiers": "^+",
        "key": "{Oemtilde}",
        "x": 320,
        "y": 460,
        "wires": [
            [
                "bde0df30871a605e"
            ]
        ]
    },
    {
        "id": "c4633543d6aa9823",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 460,
        "wires": [
            [
                "33a755ca2b8e0d61"
            ]
        ]
    },
    {
        "id": "f9802c3a1938bbb3",
        "type": "unregister-hotkey",
        "z": "6a61b64910c046bc",
        "hostname": "",
        "modifiers": "^+",
        "key": "{Oemtilde}",
        "x": 310,
        "y": 520,
        "wires": [
            [
                "bde0df30871a605e"
            ]
        ]
    },
    {
        "id": "b447b28f202f0c9b",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "f9802c3a1938bbb3"
            ]
        ]
    },
    {
        "id": "815fca67dc4f1df5",
        "type": "eye-start-observing",
        "z": "6a61b64910c046bc",
        "hostname": "",
        "adapterIndex": "0",
        "deviceIndex": "0",
        "regions": [],
        "streamDesktopThumbnail": "true",
        "streamPointerImage": "true",
        "desktopThumbnailStreamSettingsMaxFps": "0.5",
        "desktopThumbnailStreamSettingsScaleFactor": "0.15",
        "pointerImageStreamSettingsMaxFps": "0.5",
        "watchPointerPosition": "true",
        "x": 320,
        "y": 600,
        "wires": [
            [
                "bde0df30871a605e"
            ]
        ]
    },
    {
        "id": "7881dd5bb0fee994",
        "type": "stop-observing",
        "z": "6a61b64910c046bc",
        "hostname": "",
        "x": 320,
        "y": 660,
        "wires": [
            [
                "bde0df30871a605e"
            ]
        ]
    },
    {
        "id": "dd35fc2e379fa347",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 600,
        "wires": [
            [
                "815fca67dc4f1df5"
            ]
        ]
    },
    {
        "id": "039bee5fef1987c6",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 660,
        "wires": [
            [
                "7881dd5bb0fee994"
            ]
        ]
    },
    {
        "id": "c6fcf8d3ddce7ff0",
        "type": "remove-focus-region",
        "z": "6a61b64910c046bc",
        "hostname": "",
        "focusRegionName": "default",
        "x": 300,
        "y": 720,
        "wires": [
            [
                "bde0df30871a605e"
            ]
        ]
    },
    {
        "id": "8d700cf9c8bc3b71",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 720,
        "wires": [
            [
                "c6fcf8d3ddce7ff0"
            ]
        ]
    },
    {
        "id": "bde0df30871a605e",
        "type": "mqtt out",
        "z": "6a61b64910c046bc",
        "name": "Beholder Nexus",
        "topic": "",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0b70dd4da53f0867",
        "x": 640,
        "y": 420,
        "wires": []
    },
    {
        "id": "a452ecc746b49b31",
        "type": "mqtt out",
        "z": "5b3b16f7b12de95a",
        "name": "Beholder Nexus",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0b70dd4da53f0867",
        "x": 1640,
        "y": 1820,
        "wires": []
    },
    {
        "id": "a20509f002b98de9",
        "type": "send-mouse-click",
        "z": "5b3b16f7b12de95a",
        "button": "lclick",
        "click_direction": 0,
        "duration": null,
        "x": 1210,
        "y": 680,
        "wires": [
            [
                "dd786e4d487621fc"
            ]
        ]
    },
    {
        "id": "bb1f72790d7d12db",
        "type": "register-hotkey",
        "z": "5b3b16f7b12de95a",
        "hostname": "",
        "modifiers": "^+",
        "key": "{Oemtilde}",
        "x": 900,
        "y": 1780,
        "wires": [
            [
                "a452ecc746b49b31"
            ]
        ]
    },
    {
        "id": "d47744512b474040",
        "type": "unregister-hotkey",
        "z": "5b3b16f7b12de95a",
        "hostname": "",
        "modifiers": "^+",
        "key": "{Oemtilde}",
        "x": 890,
        "y": 1840,
        "wires": [
            [
                "a452ecc746b49b31"
            ]
        ]
    },
    {
        "id": "54677c7e9faec3c3",
        "type": "eye-start-observing",
        "z": "5b3b16f7b12de95a",
        "hostname": "",
        "adapterIndex": "0",
        "deviceIndex": "0",
        "regions": [],
        "streamDesktopThumbnail": "true",
        "streamPointerImage": "false",
        "desktopThumbnailStreamSettingsMaxFps": "0.5",
        "desktopThumbnailStreamSettingsScaleFactor": "0.15",
        "pointerImageStreamSettingsMaxFps": "0.5",
        "watchPointerPosition": "true",
        "x": 880,
        "y": 1940,
        "wires": [
            [
                "a452ecc746b49b31"
            ]
        ]
    },
    {
        "id": "a13940027781617e",
        "type": "stop-observing",
        "z": "5b3b16f7b12de95a",
        "hostname": "",
        "x": 880,
        "y": 2000,
        "wires": [
            [
                "a452ecc746b49b31"
            ]
        ]
    },
    {
        "id": "21d416d2262f1804",
        "type": "update-focus-region",
        "z": "5b3b16f7b12de95a",
        "hostname": "",
        "focusRegionName": "default",
        "focusRegionX": "200",
        "focusRegionY": "200",
        "focusRegionWidth": "640",
        "focusRegionHeight": "480",
        "focusRegionMaxFps": "0.15",
        "x": 1000,
        "y": 1680,
        "wires": [
            [
                "a452ecc746b49b31"
            ]
        ]
    },
    {
        "id": "b074feee2745ba5c",
        "type": "detect-object",
        "z": "5b3b16f7b12de95a",
        "queryImagePrefrontalKey": "",
        "targetImagePrefrontalKey": "",
        "matchRatioThreshold": 0.76,
        "scaleIncrement": 2,
        "rotationBins": 20,
        "outputImagePrefrontalKey": "",
        "x": 970,
        "y": 1580,
        "wires": [
            [
                "a452ecc746b49b31"
            ]
        ]
    },
    {
        "id": "099265f41f858ffa",
        "type": "inject",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 730,
        "y": 1740,
        "wires": [
            [
                "bb1f72790d7d12db"
            ]
        ]
    },
    {
        "id": "7781cb1bfe5ed28d",
        "type": "switch",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "property": "payload.data.processName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Cookie Clicker",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 1780,
        "wires": [
            [
                "ba7436256873acd9"
            ],
            []
        ]
    },
    {
        "id": "10186ee41eb9f51f",
        "type": "inject",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 710,
        "y": 1840,
        "wires": [
            [
                "d47744512b474040"
            ]
        ]
    },
    {
        "id": "c38115727d154c75",
        "type": "inject",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 710,
        "y": 1900,
        "wires": [
            [
                "54677c7e9faec3c3"
            ]
        ]
    },
    {
        "id": "a9ddb07adc38a788",
        "type": "inject",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 690,
        "y": 2040,
        "wires": [
            [
                "a13940027781617e"
            ]
        ]
    },
    {
        "id": "f9b6966bc8513856",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "create focus region request for active process window",
        "func": "const payload = msg.payload;\nflow.set(\"cookie_clicker_process\", payload.data)\n\nreturn {\n    payload: {\n        name: \"default\",\n        kind: \"image\",\n        bitmapSettings: {\n            x: payload.data.windowPosition.x,\n            y: payload.data.windowPosition.y,\n            width: payload.data.windowPosition.width - 350,\n            height: payload.data.windowPosition.height,\n            updateRateMs: 250\n        }\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1680,
        "wires": [
            [
                "21d416d2262f1804"
            ]
        ]
    },
    {
        "id": "bcf433b5e9bab1fd",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "create golden cookie detection request",
        "func": "\nreturn {\n    payload: {\n        queryImagePrefrontalKey: \"images%2FgoldCookie\",\n        targetImagePrefrontalKey: msg.payload.data.prefrontalImageKey,\n        matchMaskSettings: {\n          ratioThreshold: 0.76,\n          scaleIncrement: 2.2,\n          rotationBins: 20,\n        },\n        outputImagePrefrontalKey: null,\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1580,
        "wires": [
            [
                "b074feee2745ba5c"
            ]
        ]
    },
    {
        "id": "d66ef2ded60e78cb",
        "type": "switch",
        "z": "5b3b16f7b12de95a",
        "name": "state machine",
        "property": "cookie_clicker_state",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "idle",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "big_cookie",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "golden_cookie",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "shopping_spree",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "hand_of_fate",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "wrinkler",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 6,
        "x": 380,
        "y": 760,
        "wires": [
            [
                "bee0b6cea281c197",
                "44b5a6839c7f5ae1"
            ],
            [
                "317cd6185c5c2421"
            ],
            [
                "fb1758771042a801"
            ],
            [
                "b133d14f08304048"
            ],
            [
                "fabef2d366ccf21f"
            ],
            [
                "447eae51864e9a0c"
            ]
        ]
    },
    {
        "id": "3714332e699e79db",
        "type": "mqtt in",
        "z": "5b3b16f7b12de95a",
        "name": "on active process changed",
        "topic": "beholder/psionix/+/active_process_changed",
        "qos": "1",
        "datatype": "json",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 150,
        "y": 1680,
        "wires": [
            [
                "99130e21a2a56664"
            ]
        ]
    },
    {
        "id": "317cd6185c5c2421",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "move to big cookie",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "cookie_position",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 740,
        "wires": [
            [
                "c3b701df788fdf42"
            ]
        ]
    },
    {
        "id": "e0a9264a325ca780",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "Clicker State",
        "func": "const state = flow.get(\"cookie_clicker_state\") || \"stopped\";\nnode.status({text: state});\nreturn {};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "6ef761fb1d0f644f",
        "type": "mqtt in",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "topic": "beholder/eye/+/region/default",
        "qos": "1",
        "datatype": "json",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 160,
        "y": 1580,
        "wires": [
            [
                "bcf433b5e9bab1fd"
            ]
        ]
    },
    {
        "id": "e39d080b5092207c",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "set state to idle",
        "rules": [
            {
                "t": "set",
                "p": "cookie_clicker_state",
                "pt": "flow",
                "to": "idle",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "c1034286a85bf26a",
        "type": "inject",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1060,
        "wires": [
            [
                "342f7ba66ee8b4b1"
            ]
        ]
    },
    {
        "id": "25954b9ad3459eed",
        "type": "inject",
        "z": "5b3b16f7b12de95a",
        "name": "loop",
        "props": [],
        "repeat": "0.1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 90,
        "y": 760,
        "wires": [
            [
                "e0a9264a325ca780",
                "19b5ecd572239ea7",
                "53683ee1a6f5a550",
                "1d4b5171f0af4fea",
                "7c018bd558d4463c",
                "d66ef2ded60e78cb",
                "84fd0606909232e7"
            ]
        ]
    },
    {
        "id": "d03982fe055c45b7",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "increment golden cookie count",
        "func": "let cookieCount = flow.get(\"golden_cookie_click_count\") || 0;\ncookieCount++;\nflow.set(\"golden_cookie_click_count\", cookieCount);\nflow.set(\"last_golden_cookie\", new Date());\nnode.status({text: cookieCount});\nreturn {}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "19b5ecd572239ea7",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "big cookie location",
        "func": "const pos = flow.get(\"cookie_position\") || { x: 0, y: 0};\nnode.status({text: `X: ${pos.x} Y: ${pos.y}`});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "eae5f482832ae37c",
        "type": "switch",
        "z": "5b3b16f7b12de95a",
        "name": "> 0",
        "property": "payload.data.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 290,
        "y": 260,
        "wires": [
            [
                "713f68f2fdfa79ed"
            ]
        ]
    },
    {
        "id": "1ad67a9ed3472606",
        "type": "mqtt in",
        "z": "5b3b16f7b12de95a",
        "name": "on detected cookies",
        "topic": "beholder/occipital/+/detected_objects/images%2FgoldCookie",
        "qos": "1",
        "datatype": "json",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 110,
        "y": 220,
        "wires": [
            [
                "eae5f482832ae37c",
                "aaa42866ac54eb84",
                "30f1193c7914a8a4"
            ]
        ]
    },
    {
        "id": "7095d80831f40f1f",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "= 0 - set TTS msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "no cookies found :(",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 140,
        "wires": [
            [
                "7f048d725b0e5e4e"
            ]
        ]
    },
    {
        "id": "b753cf068a58b8de",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "active - set TTS msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "clicker enabled",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 40,
        "wires": [
            [
                "a3080a01cc5497db"
            ]
        ]
    },
    {
        "id": "1c9be2895eab85d8",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "inactive- set TTS msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "clicker disabled",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 100,
        "wires": [
            [
                "a3080a01cc5497db"
            ]
        ]
    },
    {
        "id": "47619e55c4a24c53",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "set big cookie position",
        "rules": [
            {
                "t": "set",
                "p": "cookie_position",
                "pt": "flow",
                "to": "beholder_pointer_current_position",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 40,
        "wires": [
            [
                "b753cf068a58b8de"
            ]
        ]
    },
    {
        "id": "0cad2766305c17d0",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "clear big cookie position",
        "rules": [
            {
                "t": "delete",
                "p": "cookie_position",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 100,
        "wires": [
            [
                "1c9be2895eab85d8"
            ]
        ]
    },
    {
        "id": "920b2c520ff14543",
        "type": "switch",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "property": "cookie_clicker_state",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "idle",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "stopped",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 80,
        "wires": [
            [
                "47619e55c4a24c53"
            ],
            [
                "0cad2766305c17d0"
            ]
        ]
    },
    {
        "id": "430fb44bf0d54d7a",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "toggle clicker",
        "func": "let state = flow.get(\"cookie_clicker_state\") || \"stopped\";\n\nif (state === \"stopped\") {\n    state = 'idle';\n} else {\n    state = 'stopped';\n    flow.set(\"cookie_clicker_click_count\", 0);\n}\n\nflow.set(\"cookie_clicker_state\", state);\n\nreturn {\n    payload: state\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 80,
        "wires": [
            [
                "920b2c520ff14543"
            ]
        ]
    },
    {
        "id": "6437fd87ade54ba3",
        "type": "mqtt in",
        "z": "5b3b16f7b12de95a",
        "name": "on ctrl-shift-tilde",
        "topic": "beholder/psionix/+/hotkeys/pressed/Xit7T2VtdGlsZGV9",
        "qos": "1",
        "datatype": "auto",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 100,
        "y": 40,
        "wires": [
            [
                "430fb44bf0d54d7a"
            ]
        ]
    },
    {
        "id": "b81eac771a546196",
        "type": "inject",
        "z": "5b3b16f7b12de95a",
        "name": "manual toggle",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "430fb44bf0d54d7a"
            ]
        ]
    },
    {
        "id": "53683ee1a6f5a550",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "current mouse location",
        "func": "const pos = global.get(\"beholder_pointer_current_position\") || 0;\nnode.status({text: `X: ${pos.x} Y: ${pos.y}`});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "794fe92066ef8ace",
        "type": "mqtt in",
        "z": "13065b3553c3ca8f",
        "name": "on active process changed",
        "topic": "beholder/psionix/+/active_process_changed",
        "qos": "1",
        "datatype": "json",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 130,
        "y": 260,
        "wires": [
            [
                "c44c213017bc5f6d",
                "73cdb3bb27e53215"
            ]
        ]
    },
    {
        "id": "c44c213017bc5f6d",
        "type": "function",
        "z": "13065b3553c3ca8f",
        "name": "set global beholder_active_process",
        "func": "const payload = msg.payload;\nif (!payload.data) {\n    return null;\n}\nnode.status({text: `${payload.data.processName} - X: ${payload.data.windowPosition.x} Y: ${payload.data.windowPosition.y} Width: ${payload.data.windowPosition.width} Height: ${payload.data.windowPosition.height}`});\nglobal.set(\"beholder_active_process\", payload.data);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "99130e21a2a56664",
        "type": "rbe",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload.data.processName",
        "topi": "topic",
        "x": 350,
        "y": 1680,
        "wires": [
            [
                "f9b6966bc8513856",
                "7781cb1bfe5ed28d",
                "2dfc03e34ccbe26e",
                "3682828fea8ab6fd"
            ]
        ]
    },
    {
        "id": "0b117ae57c8296b2",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "set state to shopping_spree",
        "rules": [
            {
                "t": "set",
                "p": "cookie_clicker_state",
                "pt": "flow",
                "to": "shopping_spree",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1440,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "bee0b6cea281c197",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "on the big cookie?",
        "func": "const cookiePos = flow.get(\"cookie_position\");\nconst cursorPos = global.get(\"beholder_pointer_current_position\") || 0;\n\nlet clickCount = flow.get(\"cookie_clicker_click_count\") || 0;\n\nif (!cookiePos || !cursorPos) {\n    node.status({fill: 'red', text: `clicks: ${clickCount}`});\n    return { payload: 'big_cookie' };\n}\n\nif (\n    (cursorPos.x < (cookiePos.x + 75)) &&\n    (cursorPos.x > (cookiePos.x - 75)) &&\n    (cursorPos.y < (cookiePos.y + 75)) &&\n    (cursorPos.y > (cookiePos.y - 75))\n   ) {\n       clickCount++;\n       flow.set(\"cookie_clicker_click_count\", clickCount);\n\n       node.status({fill: 'green', text: `clicks: ${clickCount}`});\n       return { payload: null };\n   }\n\nnode.status({fill: 'red', text: `clicks: ${clickCount}`});\nreturn { payload: 'big_cookie' };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 660,
        "wires": [
            [
                "3d8aba661d4c087a"
            ]
        ]
    },
    {
        "id": "ba7436256873acd9",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 1780,
        "wires": [
            [
                "bb1f72790d7d12db",
                "54677c7e9faec3c3"
            ]
        ]
    },
    {
        "id": "0deb7194453e647f",
        "type": "function",
        "z": "6a61b64910c046bc",
        "name": "reset",
        "func": "\nreturn {\n    payload: {\n          current_position: null,\n          target_position: { x: 0, y: 0 },\n          movement_type: 0,\n          movement_speed: 1,\n          movement_scale_x: 1,\n          movement_scale_y: 1,\n          movement_delay_ms: 0,\n          pre_move_actions: \"\",\n          post_move_actions: \"\",\n        }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 800,
        "wires": [
            [
                "cba4a5bc08b9e565"
            ]
        ]
    },
    {
        "id": "cba4a5bc08b9e565",
        "type": "move-mouse-to",
        "z": "6a61b64910c046bc",
        "targetPositionX": "",
        "targetPositionY": "",
        "preMoveActions": "",
        "postMoveActions": "{lclick}",
        "movementSpeed": "3",
        "movementScaleX": "1.4",
        "movementScaleY": "1.4",
        "movementDelayMs": "",
        "x": 580,
        "y": 800,
        "wires": [
            [
                "bde0df30871a605e"
            ]
        ]
    },
    {
        "id": "065e45722df9cbe8",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 800,
        "wires": [
            [
                "0deb7194453e647f"
            ]
        ]
    },
    {
        "id": "41eec896c41e8b33",
        "type": "function",
        "z": "6a61b64910c046bc",
        "name": "set movement x1",
        "func": "\nreturn {\n    payload: {\n          current_position: null,\n          target_position: { x: 1000, y: 1000 },\n          movement_type: 0,\n          movement_speed: 1,\n          movement_scale_x: 1,\n          movement_scale_y: 1,\n          movement_delay_ms: 0,\n          pre_move_actions: \"\",\n          post_move_actions: \"\",\n          points_topic: \"beholder/points\"\n        }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 860,
        "wires": [
            [
                "cba4a5bc08b9e565"
            ]
        ]
    },
    {
        "id": "97ee88f55af769a2",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 860,
        "wires": [
            [
                "41eec896c41e8b33"
            ]
        ]
    },
    {
        "id": "f51b644360f1b573",
        "type": "function",
        "z": "6a61b64910c046bc",
        "name": "set movement ",
        "func": "\nreturn {\n    payload: {\n          current_position: null,\n          target_position: { x: 2000, y: 1000 },\n          movement_type: 0,\n          movement_speed: 1,\n          movement_scale_x: 1,\n          movement_scale_y: 1,\n          movement_delay_ms: 0,\n          pre_move_actions: \"\",\n          post_move_actions: \"\",\n        }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1240,
        "wires": [
            [
                "cba4a5bc08b9e565"
            ]
        ]
    },
    {
        "id": "7117d407c75fa546",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1240,
        "wires": [
            [
                "f51b644360f1b573"
            ]
        ]
    },
    {
        "id": "795a1a536a854748",
        "type": "mqtt in",
        "z": "6a61b64910c046bc",
        "name": "",
        "topic": "beholder/points",
        "qos": "1",
        "datatype": "auto",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 820,
        "y": 160,
        "wires": [
            [
                "0f74733491ec5331"
            ]
        ]
    },
    {
        "id": "0f74733491ec5331",
        "type": "debug",
        "z": "6a61b64910c046bc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 160,
        "wires": []
    },
    {
        "id": "dfc59881fe83612a",
        "type": "function",
        "z": "6a61b64910c046bc",
        "name": "current pointer position",
        "func": "const payload = msg.payload;\nnode.status({text: `X: ${payload.data.x} Y: ${payload.data.y}`});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "d2f4a73d292524b3",
        "type": "mqtt in",
        "z": "6a61b64910c046bc",
        "name": "on pointer position changed",
        "topic": "beholder/psionix/+/pointer_position",
        "qos": "1",
        "datatype": "json",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 780,
        "y": 40,
        "wires": [
            [
                "dfc59881fe83612a"
            ]
        ]
    },
    {
        "id": "0439c5ecb5a44c02",
        "type": "function",
        "z": "6a61b64910c046bc",
        "name": "set movement x2",
        "func": "\nreturn {\n    payload: {\n          current_position: null,\n          target_position: { x: 1000, y: 1000 },\n          movement_type: 0,\n          movement_speed: 2,\n          movement_scale_x: 1,\n          movement_scale_y: 1,\n          movement_delay_ms: 0,\n          pre_move_actions: \"\",\n          post_move_actions: \"\",\n          points_topic: \"beholder/points\"\n        }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 920,
        "wires": [
            [
                "cba4a5bc08b9e565"
            ]
        ]
    },
    {
        "id": "6d1e3d59fb73a87b",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 920,
        "wires": [
            [
                "0439c5ecb5a44c02"
            ]
        ]
    },
    {
        "id": "020fb4472c47f7f8",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 980,
        "wires": [
            [
                "31c15119bb66828b"
            ]
        ]
    },
    {
        "id": "31c15119bb66828b",
        "type": "function",
        "z": "6a61b64910c046bc",
        "name": "set movement x3",
        "func": "\nreturn {\n    payload: {\n          current_position: null,\n          target_position: { x: 1000, y: 1000 },\n          movement_type: 0,\n          movement_speed: 3,\n          movement_scale_x: 1,\n          movement_scale_y: 1,\n          movement_delay_ms: 0,\n          pre_move_actions: \"\",\n          post_move_actions: \"\",\n          points_topic: \"beholder/points\"\n        }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 980,
        "wires": [
            [
                "cba4a5bc08b9e565"
            ]
        ]
    },
    {
        "id": "a9b5fe072f130b4a",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1040,
        "wires": [
            [
                "4260a2cc1d5e73a8"
            ]
        ]
    },
    {
        "id": "4260a2cc1d5e73a8",
        "type": "function",
        "z": "6a61b64910c046bc",
        "name": "set movement x4",
        "func": "\nreturn {\n    payload: {\n          current_position: null,\n          target_position: { x: 1000, y: 1000 },\n          movement_type: 0,\n          movement_speed: 4,\n          movement_scale_x: 1,\n          movement_scale_y: 1,\n          movement_delay_ms: 0,\n          pre_move_actions: \"\",\n          post_move_actions: \"\",\n          points_topic: \"beholder/points\"\n        }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1040,
        "wires": [
            [
                "cba4a5bc08b9e565"
            ]
        ]
    },
    {
        "id": "e41f8957a576fb9b",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1160,
        "wires": [
            [
                "6f8c7aa0f65a95af"
            ]
        ]
    },
    {
        "id": "6f8c7aa0f65a95af",
        "type": "function",
        "z": "6a61b64910c046bc",
        "name": "set movement x6",
        "func": "\nreturn {\n    payload: {\n          current_position: null,\n          target_position: { x: 1000, y: 1000 },\n          movement_type: 0,\n          movement_speed: 6,\n          movement_scale_x: 1,\n          movement_scale_y: 1,\n          movement_delay_ms: 0,\n          pre_move_actions: \"\",\n          post_move_actions: \"\",\n          points_topic: \"beholder/points\"\n        }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1160,
        "wires": [
            [
                "cba4a5bc08b9e565"
            ]
        ]
    },
    {
        "id": "0234167cd4ec169e",
        "type": "function",
        "z": "6a61b64910c046bc",
        "name": "set movement x5",
        "func": "\nreturn {\n    payload: {\n          current_position: null,\n          target_position: { x: 1000, y: 1000 },\n          movement_type: 0,\n          movement_speed: 5,\n          movement_scale_x: 1,\n          movement_scale_y: 1,\n          movement_delay_ms: 0,\n          pre_move_actions: \"\",\n          post_move_actions: \"\",\n          points_topic: \"beholder/points\"\n        }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1100,
        "wires": [
            [
                "cba4a5bc08b9e565"
            ]
        ]
    },
    {
        "id": "2613b23a321fe317",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1100,
        "wires": [
            [
                "0234167cd4ec169e"
            ]
        ]
    },
    {
        "id": "4485aebd18d852d2",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "shopping - set TTS msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "let's go shopping!",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 1040,
        "wires": [
            [
                "09553eaec24ff556"
            ]
        ]
    },
    {
        "id": "7de61ce12026042a",
        "type": "random",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "low": "1",
        "high": "2000",
        "inte": "true",
        "property": "payload",
        "x": 1000,
        "y": 580,
        "wires": [
            [
                "7c16802ce7d64fad"
            ]
        ]
    },
    {
        "id": "7c16802ce7d64fad",
        "type": "switch",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1130,
        "y": 580,
        "wires": [
            [
                "dfcf6a8bd2c59eb9"
            ]
        ]
    },
    {
        "id": "ac8819d740727ef6",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "set purchase TTS",
        "func": "const items = [\n    'Cursor',\n    'Grandma',\n    'Farm',\n    'Mine',\n    'Factory',\n    'Bank',\n    'Temple',\n    'Wizard Tower',\n    'Shipment',\n    'Alchemy Lab',\n    'Portal',\n    'Time Machine',\n    'Antimatter Condenser',\n    'Prism',\n    'Chancemaker',\n    'Fractal Engine',\n    \"Javascript console\",\n    \"Idleverse\"\n];\n\nif (msg.payload < 0) {\n    return {\n        payload: `bought a fancy item`,\n    }\n}\n\nreturn {\n    payload: `bought a ${items[msg.payload]}`,\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1120,
        "wires": [
            [
                "09553eaec24ff556"
            ]
        ]
    },
    {
        "id": "d9ca6579edf19e7b",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "set state to hand_of_fate",
        "rules": [
            {
                "t": "set",
                "p": "cookie_clicker_state",
                "pt": "flow",
                "to": "hand_of_fate",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1310,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "fabef2d366ccf21f",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "move to hand of fate",
        "func": "const lastHandOfFate = flow.get(\"last_hand_of_fate\");\nif (lastHandOfFate) {\n    const diff = (new Date()) - lastHandOfFate;\n}\n\nif (lastHandOfFate) {\n    const hofDiff = (new Date()) - lastHandOfFate;\n    if (hofDiff <= 7 * 60 * 1000) {\n        flow.set(\"cookie_clicker_state\", \"idle\")\n        return null;\n    }\n}\n\n\nreturn {\n    payload: {\n        x: 895,\n        y: 230\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1300,
        "wires": [
            [
                "59d7efff603f7629",
                "4a0267f0f443486a",
                "bcbe282f991c1f0d"
            ]
        ]
    },
    {
        "id": "4a0267f0f443486a",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "set state to idle",
        "rules": [
            {
                "t": "set",
                "p": "last_hand_of_fate",
                "pt": "flow",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "cookie_clicker_state",
                "pt": "flow",
                "to": "idle",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "9387d0e01d441108",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "hand of fate is available",
        "func": "const lastHandOfFate = flow.get(\"last_hand_of_fate\");\n\nif (lastHandOfFate) {\n    const hofDiff = (new Date()) - lastHandOfFate;\n    if (hofDiff <= 7 * 60 * 1000) {\n        return null;\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 540,
        "wires": [
            [
                "d9ca6579edf19e7b"
            ]
        ]
    },
    {
        "id": "1d4b5171f0af4fea",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "Hand of Fate",
        "func": "const lastHandOfFate = flow.get(\"last_hand_of_fate\");\n\nif (lastHandOfFate) {\n    const hofDiff = (new Date()) - lastHandOfFate;\n    if (hofDiff <= 7 * 60 * 1000) {\n        node.status({fill: 'red', text: hofDiff / 1000});\n    } else {\n        node.status({fill: 'green', text: hofDiff / 1000});\n    }\n} else {\n    node.status({fill: 'green'});\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "de92c7b2302f4458",
        "type": "inject",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1200,
        "wires": [
            [
                "4c324128b8f398e8"
            ]
        ]
    },
    {
        "id": "4c324128b8f398e8",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "last_hand_of_fate",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "aaa42866ac54eb84",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "golden cookies?",
        "func": "const payload = msg.payload;\n\nif (payload.data.length > 0) {\n    node.status({fill: 'green', text: payload.data.length});\n} else {\n    node.status({fill: 'red', text: payload.data.length});\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "3d8aba661d4c087a",
        "type": "switch",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 830,
        "y": 660,
        "wires": [
            [
                "2d0ca2ab4b4d6177"
            ],
            [
                "cfd97a38e57c9c98"
            ]
        ]
    },
    {
        "id": "24e04be2cbcc45b4",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "set state to golden cookie",
        "rules": [
            {
                "t": "set",
                "p": "cookie_clicker_state",
                "pt": "flow",
                "to": "golden_cookie",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "33cfe288ca9f4146",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "set state to idle",
        "rules": [
            {
                "t": "set",
                "p": "cookie_clicker_state",
                "pt": "flow",
                "to": "idle",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "shopping_spree_state",
                "pt": "flow",
                "to": "not_ok",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1500,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "2d0ca2ab4b4d6177",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "set state to big_cookie",
        "rules": [
            {
                "t": "set",
                "p": "cookie_clicker_state",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1020,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "342f7ba66ee8b4b1",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "set state to big_cookie",
        "rules": [
            {
                "t": "set",
                "p": "cookie_clicker_state",
                "pt": "flow",
                "to": "big_cookie",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "5c2bcd7ce24a20b2",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "set state to idle",
        "rules": [
            {
                "t": "set",
                "p": "cookie_clicker_state",
                "pt": "flow",
                "to": "idle",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "c3b701df788fdf42",
        "type": "delay",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "x": 850,
        "y": 740,
        "wires": [
            [
                "5c2bcd7ce24a20b2",
                "8edb89df26a76fee"
            ]
        ]
    },
    {
        "id": "7c018bd558d4463c",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "golden cookie location",
        "func": "const pos = flow.get(\"golden_cookie_position\") || { x: 0, y: 0};\nnode.status({text: `X: ${pos.x} Y: ${pos.y}`});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "cfd97a38e57c9c98",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 680,
        "wires": [
            [
                "a20509f002b98de9"
            ]
        ]
    },
    {
        "id": "737c830955d1d29a",
        "type": "inject",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 110,
        "y": 1120,
        "wires": [
            [
                "534b77bb4f622eb5"
            ]
        ]
    },
    {
        "id": "534b77bb4f622eb5",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "set state to shopping_spree",
        "rules": [
            {
                "t": "set",
                "p": "cookie_clicker_state",
                "pt": "flow",
                "to": "shopping_spree",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "shopping_spree_state",
                "pt": "flow",
                "to": "ok",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "last_shopping_spree",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "59d7efff603f7629",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "set HOF TTS msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "tempting the hand of fate!",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 1300,
        "wires": [
            [
                "dea13a3016de884d"
            ]
        ]
    },
    {
        "id": "99be91037f7c03fb",
        "type": "play audio",
        "z": "13065b3553c3ca8f",
        "name": "",
        "voice": "49",
        "x": 590,
        "y": 520,
        "wires": []
    },
    {
        "id": "1cbae375d3f7ea9d",
        "type": "link in",
        "z": "13065b3553c3ca8f",
        "name": "play audio",
        "links": [
            "a3080a01cc5497db",
            "dea13a3016de884d",
            "09553eaec24ff556",
            "7f048d725b0e5e4e",
            "5562a4da8a82975d",
            "590322f6254633aa"
        ],
        "x": 55,
        "y": 520,
        "wires": [
            [
                "35c5065c42945ed9"
            ]
        ]
    },
    {
        "id": "a3080a01cc5497db",
        "type": "link out",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "links": [
            "1cbae375d3f7ea9d"
        ],
        "x": 1155,
        "y": 60,
        "wires": []
    },
    {
        "id": "dea13a3016de884d",
        "type": "link out",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "links": [
            "1cbae375d3f7ea9d"
        ],
        "x": 1075,
        "y": 1300,
        "wires": []
    },
    {
        "id": "09553eaec24ff556",
        "type": "link out",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "links": [
            "1cbae375d3f7ea9d"
        ],
        "x": 1335,
        "y": 1040,
        "wires": []
    },
    {
        "id": "a5e3e8df7a1e1cd0",
        "type": "link in",
        "z": "13065b3553c3ca8f",
        "name": "mouse movement",
        "links": [
            "3567c421a6d0e11e",
            "8edb89df26a76fee",
            "c88ba120c1c18341",
            "bcbe282f991c1f0d",
            "e8467bbee93c8e9a"
        ],
        "x": 55,
        "y": 660,
        "wires": [
            [
                "e1d1f0dcbf991ab3"
            ]
        ]
    },
    {
        "id": "e1d1f0dcbf991ab3",
        "type": "function",
        "z": "13065b3553c3ca8f",
        "name": "set movement ",
        "func": "\nreturn {\n    payload: {\n          current_position: null,\n          target_position: {\n              x: msg.payload.x,\n              y: msg.payload.y,\n          },\n          movement_type: 0,\n          movement_speed: 4,\n          movement_scale_x: 1,\n          movement_scale_y: 1,\n          movement_delay_ms: 0,\n          pre_move_actions: \"\",\n          post_move_actions: msg.payload.post_move_actions || \"{lclick}\",\n        }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 660,
        "wires": [
            [
                "f2cb5412fcc204b5"
            ]
        ]
    },
    {
        "id": "f2cb5412fcc204b5",
        "type": "delay",
        "z": "13065b3553c3ca8f",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 410,
        "y": 660,
        "wires": [
            [
                "ff0952739be8e587"
            ]
        ]
    },
    {
        "id": "ff0952739be8e587",
        "type": "move-mouse-to",
        "z": "13065b3553c3ca8f",
        "targetPositionX": "",
        "targetPositionY": "",
        "preMoveActions": "",
        "postMoveActions": "{lclick}",
        "movementSpeed": "3",
        "movementScaleX": "1.4",
        "movementScaleY": "1.4",
        "movementDelayMs": "",
        "x": 600,
        "y": 660,
        "wires": [
            [
                "fe1edd641cebed8b"
            ]
        ]
    },
    {
        "id": "fe1edd641cebed8b",
        "type": "mqtt out",
        "z": "13065b3553c3ca8f",
        "name": "Beholder Nexus",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0b70dd4da53f0867",
        "x": 940,
        "y": 660,
        "wires": []
    },
    {
        "id": "3567c421a6d0e11e",
        "type": "link out",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "links": [
            "a5e3e8df7a1e1cd0"
        ],
        "x": 1095,
        "y": 900,
        "wires": []
    },
    {
        "id": "8edb89df26a76fee",
        "type": "link out",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "links": [
            "a5e3e8df7a1e1cd0"
        ],
        "x": 995,
        "y": 720,
        "wires": []
    },
    {
        "id": "bcbe282f991c1f0d",
        "type": "link out",
        "z": "5b3b16f7b12de95a",
        "name": "move mouse",
        "links": [
            "a5e3e8df7a1e1cd0"
        ],
        "x": 855,
        "y": 1260,
        "wires": []
    },
    {
        "id": "c88ba120c1c18341",
        "type": "link out",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "links": [
            "a5e3e8df7a1e1cd0"
        ],
        "x": 1395,
        "y": 1160,
        "wires": []
    },
    {
        "id": "0121a751ecba47db",
        "type": "random",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "low": "-2",
        "high": "17",
        "inte": "true",
        "property": "payload",
        "x": 1000,
        "y": 1160,
        "wires": [
            [
                "99dcf84b2b1e86c8",
                "ac8819d740727ef6",
                "387cf9e65c966b8b"
            ]
        ]
    },
    {
        "id": "99dcf84b2b1e86c8",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "move to random store item",
        "func": "const cookieClickerProcess = flow.get(\"cookie_clicker_process\");\nif (!cookieClickerProcess) {\n    return;\n}\n\nif (msg.payload < 0) {\n    return {\n        payload: {\n            x: cookieClickerProcess.windowPosition.width - 300,\n            y: cookieClickerProcess.windowPosition.y + 200\n        }\n    }\n}\n\nreturn {\n    payload: {\n        x: cookieClickerProcess.windowPosition.width - 300,\n        y: cookieClickerProcess.windowPosition.y + 300 + (msg.payload * 62),\n    },\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 1160,
        "wires": [
            [
                "c88ba120c1c18341"
            ]
        ]
    },
    {
        "id": "ec2b272a3616f52f",
        "type": "inject",
        "z": "13065b3553c3ca8f",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "hello, world",
        "payloadType": "str",
        "x": 130,
        "y": 440,
        "wires": [
            [
                "8bf5c395f0a324e9"
            ]
        ]
    },
    {
        "id": "8bf5c395f0a324e9",
        "type": "delay",
        "z": "13065b3553c3ca8f",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 370,
        "y": 520,
        "wires": [
            [
                "99be91037f7c03fb"
            ]
        ]
    },
    {
        "id": "7f048d725b0e5e4e",
        "type": "link out",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "links": [
            "1cbae375d3f7ea9d"
        ],
        "x": 915,
        "y": 180,
        "wires": []
    },
    {
        "id": "b58cbb9a393ac0a2",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "== 1 - set TTS msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "oh look, it's a golden cookie!",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 180,
        "wires": [
            [
                "7f048d725b0e5e4e"
            ]
        ]
    },
    {
        "id": "35c5065c42945ed9",
        "type": "rbe",
        "z": "13065b3553c3ca8f",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 170,
        "y": 520,
        "wires": [
            [
                "8bf5c395f0a324e9"
            ]
        ]
    },
    {
        "id": "56d761847bdb4769",
        "type": "send-mouse-click",
        "z": "6a61b64910c046bc",
        "button": "lclick",
        "click_direction": 0,
        "duration": null,
        "x": 310,
        "y": 340,
        "wires": [
            [
                "bde0df30871a605e"
            ]
        ]
    },
    {
        "id": "461c135910b8a662",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 340,
        "wires": [
            [
                "56d761847bdb4769"
            ]
        ]
    },
    {
        "id": "713f68f2fdfa79ed",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "set detected golden cookies",
        "rules": [
            {
                "t": "set",
                "p": "detected_golden_cookies",
                "pt": "flow",
                "to": "payload.data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 260,
        "wires": [
            [
                "e2dc2f77c43523ff"
            ]
        ]
    },
    {
        "id": "fd06cc09f8b0d126",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "create wrinkler detection request",
        "func": "\nreturn {\n    payload: {\n        queryImagePrefrontalKey: \"images%2Fwrinkler\",\n        targetImagePrefrontalKey: msg.payload.data.prefrontalImageKey,\n        matchMaskSettings: {\n          ratioThreshold: 0.76,\n          scaleIncrement: 1.0,\n          rotationBins: 40,\n        },\n        outputImagePrefrontalKey: null,\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1540,
        "wires": [
            [
                "b074feee2745ba5c"
            ]
        ]
    },
    {
        "id": "9249b3960b38569d",
        "type": "mqtt in",
        "z": "5b3b16f7b12de95a",
        "name": "on detected wrinkler",
        "topic": "beholder/occipital/+/detected_objects/images%2Fwrinkler",
        "qos": "1",
        "datatype": "json",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 1230,
        "y": 220,
        "wires": [
            [
                "ef302e0686d3d075",
                "c5447c78de989356",
                "29debd17e217aef9"
            ]
        ]
    },
    {
        "id": "0197482813f50d33",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "== 0 - set TTS msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "eww, scrape it off",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1710,
        "y": 180,
        "wires": [
            [
                "5562a4da8a82975d"
            ]
        ]
    },
    {
        "id": "5562a4da8a82975d",
        "type": "link out",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "links": [
            "1cbae375d3f7ea9d"
        ],
        "x": 1855,
        "y": 200,
        "wires": []
    },
    {
        "id": "61d42032f19efae5",
        "type": "switch",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "property": "payload.data.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1530,
        "y": 200,
        "wires": [
            [
                "0197482813f50d33"
            ],
            [
                "1900e2eebda3931a"
            ]
        ]
    },
    {
        "id": "ef302e0686d3d075",
        "type": "rbe",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "func": "rbei",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload.data.length",
        "topi": "topic",
        "x": 1410,
        "y": 220,
        "wires": [
            [
                "61d42032f19efae5"
            ]
        ]
    },
    {
        "id": "30f1193c7914a8a4",
        "type": "rbe",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "func": "rbei",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload.data.length",
        "topi": "topic",
        "x": 290,
        "y": 220,
        "wires": [
            [
                "7de08ff234688bc0"
            ]
        ]
    },
    {
        "id": "7de08ff234688bc0",
        "type": "switch",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "property": "payload.data.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 470,
        "y": 200,
        "wires": [
            [
                "7095d80831f40f1f"
            ],
            [
                "b58cbb9a393ac0a2"
            ],
            [
                "91c52255a5393243"
            ]
        ]
    },
    {
        "id": "91c52255a5393243",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "> 1 - set TTS msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "so many cookies!",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 220,
        "wires": [
            [
                "7f048d725b0e5e4e"
            ]
        ]
    },
    {
        "id": "1900e2eebda3931a",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "> 1 - set TTS msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "so many wrinklers. gross.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1710,
        "y": 220,
        "wires": [
            [
                "5562a4da8a82975d"
            ]
        ]
    },
    {
        "id": "5a4920d06d6eae57",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "set detected wrinklers",
        "rules": [
            {
                "t": "set",
                "p": "detected_wrinklers",
                "pt": "flow",
                "to": "payload.data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1580,
        "y": 260,
        "wires": [
            [
                "7cdb1dfc88862b56"
            ]
        ]
    },
    {
        "id": "6bd8ada57769aa5a",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "set state to wrinkler",
        "rules": [
            {
                "t": "set",
                "p": "cookie_clicker_state",
                "pt": "flow",
                "to": "wrinkler",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1750,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "447eae51864e9a0c",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "determine wrinkler midpoint",
        "func": "const polys = flow.get(\"detected_wrinklers\")\nconst activeProcess = global.get(\"beholder_active_process\");\n\nif (!polys || polys.length === 0) {\n    return null;\n}\n\nif (!activeProcess) {\n    return null;\n}\n\nlet midpoints = [];\n\npolys.forEach((poly) => {\n    var mid = {\n        x: 0,\n        y: 0,\n    };\n\n    poly.points.forEach((point) => {\n        mid.x += point.x + activeProcess.windowPosition.x;\n        mid.y += point.y + activeProcess.windowPosition.y + 290;\n    });\n    mid.x = Math.floor(mid.x / poly.points.length);\n    mid.y = Math.floor(mid.y / poly.points.length);\n    midpoints.push(mid);\n});\n\nnode.status({text: `X: ${midpoints[0].x} Y: ${midpoints[0].y}`});\n\nreturn {\n    payload: {\n        x: midpoints[0].x,\n        y: midpoints[0].y,\n        post_move_actions: \"{lclick}{lclick}{lclick}{lclick}\",\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1420,
        "wires": [
            [
                "8a894b7e04539cb9",
                "9f0db2819d159188"
            ]
        ]
    },
    {
        "id": "e8467bbee93c8e9a",
        "type": "link out",
        "z": "5b3b16f7b12de95a",
        "name": "move mouse",
        "links": [
            "a5e3e8df7a1e1cd0"
        ],
        "x": 1035,
        "y": 1400,
        "wires": []
    },
    {
        "id": "af0a11e51ba54932",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "set state to idle",
        "rules": [
            {
                "t": "set",
                "p": "last_hand_of_fate",
                "pt": "flow",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "cookie_clicker_state",
                "pt": "flow",
                "to": "idle",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1240,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "c5447c78de989356",
        "type": "switch",
        "z": "5b3b16f7b12de95a",
        "name": "> 0",
        "property": "payload.data.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1410,
        "y": 260,
        "wires": [
            [
                "5a4920d06d6eae57"
            ]
        ]
    },
    {
        "id": "8a894b7e04539cb9",
        "type": "delay",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "x": 920,
        "y": 1400,
        "wires": [
            [
                "e8467bbee93c8e9a"
            ]
        ]
    },
    {
        "id": "44b5a6839c7f5ae1",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "since last golden cookie",
        "func": "const lastGoldenCookie = flow.get(\"last_golden_cookie\");\n\nif (!lastGoldenCookie) {\n    return null;\n}\n\nconst diff = (new Date()) - lastGoldenCookie;\nnode.status({text: diff / 1000});\n\nflow.set(\"since_last_golden_cookie\", diff);\n\nreturn {\n    payload: diff,\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 560,
        "wires": [
            [
                "ac64113cf662a929"
            ]
        ]
    },
    {
        "id": "ac64113cf662a929",
        "type": "switch",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "3000",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "30000",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 560,
        "wires": [
            [
                "9387d0e01d441108"
            ],
            [
                "7de61ce12026042a"
            ]
        ]
    },
    {
        "id": "04e9368f93cb579f",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "reset cookie clicker window",
        "func": "const beholderServices = global.get('beholder_services');\nlet hostName = \"\";\nif (beholderServices && beholderServices.daemon) {\n    hostName = beholderServices.daemon[0];\n}\n\nif (!hostName) {\n    node.error('No daemon hostname found');\n    return;\n}\n\nreturn {\n    topic: `beholder/psionix/${hostName}/move_window`,\n    payload: {\n        datacontenttype: \"application/json\",\n        specversion: \"0.1\",\n        data: {\n            processName: \"Cookie Clicker\",\n            targetPosition: {\n                x: -7,\n                y: 0,\n                width: 1934,\n                height: 1567,\n            },\n            repaint: true\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 2160,
        "wires": [
            [
                "a452ecc746b49b31"
            ]
        ]
    },
    {
        "id": "a92ada2391dd3042",
        "type": "inject",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 530,
        "y": 2200,
        "wires": [
            [
                "b8a02dc1d7c68464"
            ]
        ]
    },
    {
        "id": "f9248f9fa72bc73f",
        "type": "mqtt in",
        "z": "6a61b64910c046bc",
        "name": "",
        "topic": "beholder/psionix/+/move_window",
        "qos": "1",
        "datatype": "auto",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 180,
        "y": 180,
        "wires": [
            [
                "ec0798c50e445d70"
            ]
        ]
    },
    {
        "id": "2dfc03e34ccbe26e",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "if not stopped",
        "func": "const state = flow.get(\"cookie_clicker_state\") || \"stopped\";\n\nif (!state || state === \"stopped\") {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2020,
        "wires": [
            [
                "b8a02dc1d7c68464"
            ]
        ]
    },
    {
        "id": "e2dc2f77c43523ff",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "if not stopped",
        "func": "const state = flow.get(\"cookie_clicker_state\") || \"stopped\";\n\nif (!state || state === \"stopped\") {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 260,
        "wires": [
            [
                "24e04be2cbcc45b4"
            ]
        ]
    },
    {
        "id": "7cdb1dfc88862b56",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "if not stopped",
        "func": "const state = flow.get(\"cookie_clicker_state\") || \"stopped\";\n\nif (!state || state === \"stopped\") {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 260,
        "wires": [
            [
                "6bd8ada57769aa5a"
            ]
        ]
    },
    {
        "id": "fb1758771042a801",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "determine golden cookie midpoint",
        "func": "const polys = flow.get(\"detected_golden_cookies\")\nconst activeProcess = global.get(\"beholder_active_process\");\n\nif (!polys || polys.length === 0) {\n    return null;\n}\n\nif (!activeProcess) {\n    return null;\n}\n\nlet midpoints = [];\n\npolys.forEach((poly) => {\n    var mid = {\n        x: 0,\n        y: 0,\n    };\n\n    poly.points.forEach((point) => {\n        mid.x += point.x + activeProcess.windowPosition.x;\n        mid.y += point.y + activeProcess.windowPosition.y;\n    });\n    mid.x = Math.floor(mid.x / poly.points.length);\n    mid.y = Math.floor(mid.y / poly.points.length);\n    midpoints.push(mid);\n});\n\nnode.status({text: `X: ${midpoints[0].x} Y: ${midpoints[0].y}`});\n\nreturn {\n    payload: midpoints[0]\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 920,
        "wires": [
            [
                "56263e293593d0e3",
                "9f70783be0af51d4",
                "ee783ca4bdfbf798"
            ]
        ]
    },
    {
        "id": "56263e293593d0e3",
        "type": "delay",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "x": 970,
        "y": 900,
        "wires": [
            [
                "3567c421a6d0e11e"
            ]
        ]
    },
    {
        "id": "29debd17e217aef9",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "wrinklers?",
        "func": "const payload = msg.payload;\n\nif (payload.data.length > 0) {\n    node.status({fill: 'green', text: payload.data.length});\n} else {\n    node.status({fill: 'red', text: payload.data.length});\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "9f70783be0af51d4",
        "type": "rbe",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 950,
        "y": 980,
        "wires": [
            [
                "d03982fe055c45b7"
            ]
        ]
    },
    {
        "id": "b41b4c5eb954408c",
        "type": "inject",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 360,
        "wires": [
            [
                "e571c036900a72f1"
            ]
        ]
    },
    {
        "id": "e571c036900a72f1",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "simulate cookies",
        "func": "\nreturn {\n    payload: {\n    data: [\n        {\n            \"points\":[\n                    {\"x\":324,\"y\":1294},\n                    {\"x\":421,\"y\":1330},\n                    {\"x\":385,\"y\":1428},\n                    {\"x\":287,\"y\":1391}\n                ],\n                \"imageCacheKey\":null\n            \n        }\n        ]\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 360,
        "wires": [
            [
                "eae5f482832ae37c",
                "30f1193c7914a8a4"
            ]
        ]
    },
    {
        "id": "ee783ca4bdfbf798",
        "type": "delay",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "pauseType": "delay",
        "timeout": "750",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 970,
        "y": 940,
        "wires": [
            [
                "e39d080b5092207c"
            ]
        ]
    },
    {
        "id": "72e302a3cb4b7f6d",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "simulate cookies 2",
        "func": "\nreturn {\n    payload: {\n    data: [\n        {\n            \"points\":[\n                    {\"x\":324,\"y\":1294},\n                    {\"x\":421,\"y\":1330},\n                    {\"x\":385,\"y\":1428},\n                    {\"x\":287,\"y\":1391}\n                ],\n                \"imageCacheKey\":null\n            \n        }\n        ]\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "6c9f0fcb89e3f0b2",
        "type": "inject",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 420,
        "wires": [
            [
                "72e302a3cb4b7f6d"
            ]
        ]
    },
    {
        "id": "b14c20027b067b58",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "last_shopping_spree",
                "pt": "flow",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "84fd0606909232e7",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "Shopping Spree",
        "func": "const lastShoppingSpree = flow.get(\"last_shopping_spree\");\nconst shoppingSpreeState = flow.get(\"shopping_spree_state\");\n\nconst shoppingRate = 5 * 60 * 1000; // 2 minutes\n\nif (lastShoppingSpree) {\n    const ssDiff = ((new Date()) - lastShoppingSpree);\n    const statusText = `${ssDiff / 1000} - ${shoppingSpreeState}`;\n    \n    if (shoppingSpreeState === \"shopping\") {\n        node.status({fill: 'blue', text: statusText});\n        return;\n    }\n\n    if (ssDiff <= shoppingRate) {\n        node.status({fill: 'red', text: statusText});\n        flow.set(\"shopping_spree_state\", \"too_soon\");\n    } else {\n        node.status({fill: 'green', text: statusText});\n        flow.set(\"shopping_spree_state\", \"ok\");\n    }\n} else {\n    node.status({fill: 'green'});\n    flow.set(\"shopping_spree_state\", \"ok\");\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "b133d14f08304048",
        "type": "switch",
        "z": "5b3b16f7b12de95a",
        "name": "shopping state",
        "property": "shopping_spree_state",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "shopping",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 660,
        "y": 1100,
        "wires": [
            [
                "4485aebd18d852d2",
                "b7d557c5a9675a88"
            ],
            [
                "6e06170a82cb622e"
            ],
            [
                "7f4901461e5957e7"
            ]
        ]
    },
    {
        "id": "6e06170a82cb622e",
        "type": "delay",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "x": 830,
        "y": 1160,
        "wires": [
            [
                "0121a751ecba47db"
            ]
        ]
    },
    {
        "id": "7f4901461e5957e7",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "set state to idle",
        "rules": [
            {
                "t": "set",
                "p": "cookie_clicker_state",
                "pt": "flow",
                "to": "idle",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "b7d557c5a9675a88",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "set state to shopping",
        "rules": [
            {
                "t": "set",
                "p": "shopping_spree_state",
                "pt": "flow",
                "to": "shopping",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 1080,
        "wires": [
            [
                "b14c20027b067b58"
            ]
        ]
    },
    {
        "id": "387cf9e65c966b8b",
        "type": "delay",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "pauseType": "rate",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "8",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "x": 1180,
        "y": 1200,
        "wires": [
            [
                "6681d1a43e7b4562"
            ]
        ]
    },
    {
        "id": "6681d1a43e7b4562",
        "type": "delay",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "pauseType": "delay",
        "timeout": "8",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 1340,
        "y": 1200,
        "wires": [
            [
                "33cfe288ca9f4146"
            ]
        ]
    },
    {
        "id": "dd786e4d487621fc",
        "type": "mqtt out",
        "z": "5b3b16f7b12de95a",
        "name": "Beholder Nexus",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0b70dd4da53f0867",
        "x": 1400,
        "y": 680,
        "wires": []
    },
    {
        "id": "dfcf6a8bd2c59eb9",
        "type": "switch",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "property": "shopping_spree_state",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1250,
        "y": 580,
        "wires": [
            [
                "0b117ae57c8296b2"
            ]
        ]
    },
    {
        "id": "45c147a3cec44e28",
        "type": "mqtt out",
        "z": "6a61b64910c046bc",
        "name": "Beholder Nexus",
        "topic": "",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0b70dd4da53f0867",
        "x": 1460,
        "y": 440,
        "wires": []
    },
    {
        "id": "f9ae469d32527bc9",
        "type": "function",
        "z": "6a61b64910c046bc",
        "name": "maximize window",
        "func": "const beholderServices = global.get('beholder_services');\nlet hostName = \"\";\nif (beholderServices && beholderServices.daemon) {\n    hostName = beholderServices.daemon[0];\n}\n\nif (!hostName) {\n    node.error('No daemon hostname found');\n    return;\n}\n\nreturn {\n    topic: `beholder/psionix/${hostName}/show_window`,\n    payload: {\n        datacontenttype: \"application/json\",\n        specversion: \"0.1\",\n        data: {\n            processName: \"Cookie Clicker\",\n            command: \"Maximize\"\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 440,
        "wires": [
            [
                "45c147a3cec44e28"
            ]
        ]
    },
    {
        "id": "84883bbb67104d6e",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1090,
        "y": 440,
        "wires": [
            [
                "f9ae469d32527bc9"
            ]
        ]
    },
    {
        "id": "2538917b5ba0052f",
        "type": "function",
        "z": "6a61b64910c046bc",
        "name": "reset cookie clicker window",
        "func": "const beholderServices = global.get('beholder_services');\nlet hostName = \"\";\nif (beholderServices && beholderServices.daemon) {\n    hostName = beholderServices.daemon[0];\n}\n\nif (!hostName) {\n    node.error('No daemon hostname found');\n    return;\n}\n\nreturn {\n    topic: `beholder/psionix/${hostName}/move_window`,\n    payload: {\n        datacontenttype: \"application/json\",\n        specversion: \"0.1\",\n        data: {\n            processName: \"Cookie Clicker\",\n            targetPosition: {\n                x: -7,\n                y: 0,\n                width: 1934,\n                height: 1567,\n            },\n            repaint: true\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 660,
        "wires": [
            [
                "45c147a3cec44e28"
            ]
        ]
    },
    {
        "id": "b6650b3032ef36db",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1030,
        "y": 660,
        "wires": [
            [
                "2538917b5ba0052f"
            ]
        ]
    },
    {
        "id": "1e08a7d138f47f90",
        "type": "function",
        "z": "6a61b64910c046bc",
        "name": "minimize window",
        "func": "const beholderServices = global.get('beholder_services');\nlet hostName = \"\";\nif (beholderServices && beholderServices.daemon) {\n    hostName = beholderServices.daemon[0];\n}\n\nif (!hostName) {\n    node.error('No daemon hostname found');\n    return;\n}\n\nreturn {\n    topic: `beholder/psionix/${hostName}/show_window`,\n    payload: {\n        datacontenttype: \"application/json\",\n        specversion: \"0.1\",\n        data: {\n            processName: \"Cookie Clicker\",\n            command: \"Minimize\"\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 480,
        "wires": [
            [
                "45c147a3cec44e28"
            ]
        ]
    },
    {
        "id": "fd43de340239a04e",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1090,
        "y": 480,
        "wires": [
            [
                "1e08a7d138f47f90"
            ]
        ]
    },
    {
        "id": "9397400cb350b099",
        "type": "function",
        "z": "6a61b64910c046bc",
        "name": "normalize window",
        "func": "const beholderServices = global.get('beholder_services');\nlet hostName = \"\";\nif (beholderServices && beholderServices.daemon) {\n    hostName = beholderServices.daemon[0];\n}\n\nif (!hostName) {\n    node.error('No daemon hostname found');\n    return;\n}\n\nreturn {\n    topic: `beholder/psionix/${hostName}/show_window`,\n    payload: {\n        datacontenttype: \"application/json\",\n        specversion: \"0.1\",\n        data: {\n            processName: \"Cookie Clicker\",\n            command: \"Normal\"\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "62f4b162eae5c1fd",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1090,
        "y": 520,
        "wires": [
            [
                "9397400cb350b099"
            ]
        ]
    },
    {
        "id": "47300e956b5bb546",
        "type": "function",
        "z": "6a61b64910c046bc",
        "name": "show window",
        "func": "const beholderServices = global.get('beholder_services');\nlet hostName = \"\";\nif (beholderServices && beholderServices.daemon) {\n    hostName = beholderServices.daemon[0];\n}\n\nif (!hostName) {\n    node.error('No daemon hostname found');\n    return;\n}\n\nreturn {\n    topic: `beholder/psionix/${hostName}/show_window`,\n    payload: {\n        datacontenttype: \"application/json\",\n        specversion: \"0.1\",\n        data: {\n            processName: \"Cookie Clicker\",\n            command: \"Show\"\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 560,
        "wires": [
            [
                "45c147a3cec44e28"
            ]
        ]
    },
    {
        "id": "8d1f1048b59d8866",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1090,
        "y": 560,
        "wires": [
            [
                "47300e956b5bb546"
            ]
        ]
    },
    {
        "id": "6afad57fcca6be79",
        "type": "function",
        "z": "6a61b64910c046bc",
        "name": "Restore window",
        "func": "const beholderServices = global.get('beholder_services');\nlet hostName = \"\";\nif (beholderServices && beholderServices.daemon) {\n    hostName = beholderServices.daemon[0];\n}\n\nif (!hostName) {\n    node.error('No daemon hostname found');\n    return;\n}\n\nreturn {\n    topic: `beholder/psionix/${hostName}/show_window`,\n    payload: {\n        datacontenttype: \"application/json\",\n        specversion: \"0.1\",\n        data: {\n            processName: \"Cookie Clicker\",\n            command: \"Restore\"\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 600,
        "wires": [
            [
                "45c147a3cec44e28"
            ]
        ]
    },
    {
        "id": "e70b25e1c9ac2d68",
        "type": "inject",
        "z": "6a61b64910c046bc",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1090,
        "y": 600,
        "wires": [
            [
                "6afad57fcca6be79"
            ]
        ]
    },
    {
        "id": "b8a02dc1d7c68464",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "Restore window",
        "func": "const beholderServices = global.get('beholder_services');\nlet hostName = \"\";\nif (beholderServices && beholderServices.daemon) {\n    hostName = beholderServices.daemon[0];\n}\n\nif (!hostName) {\n    node.error('No daemon hostname found');\n    return;\n}\n\nreturn {\n    topic: `beholder/psionix/${hostName}/show_window`,\n    payload: {\n        datacontenttype: \"application/json\",\n        specversion: \"0.1\",\n        data: {\n            processName: \"Cookie Clicker\",\n            command: \"Restore\"\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 2160,
        "wires": [
            [
                "a452ecc746b49b31",
                "c522549a7885921e"
            ]
        ]
    },
    {
        "id": "c522549a7885921e",
        "type": "delay",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 900,
        "y": 2160,
        "wires": [
            [
                "04e9368f93cb579f"
            ]
        ]
    },
    {
        "id": "0fba20ebde0fa28b",
        "type": "inject",
        "z": "5b3b16f7b12de95a",
        "name": "loop",
        "props": [],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 130,
        "y": 2160,
        "wires": [
            [
                "b8a02dc1d7c68464"
            ]
        ]
    },
    {
        "id": "6141fa170dc1383c",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "create krumblor detection request",
        "func": "\nreturn {\n    payload: {\n        queryImagePrefrontalKey: \"images%2Fkrumblor\",\n        targetImagePrefrontalKey: msg.payload.data.prefrontalImageKey,\n        matchMaskSettings: {\n          ratioThreshold: 0.72,\n          scaleIncrement: 2.4,\n          rotationBins: 40,\n        },\n        outputImagePrefrontalKey: null,\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1500,
        "wires": [
            [
                "b074feee2745ba5c"
            ]
        ]
    },
    {
        "id": "7c9c994893f736a1",
        "type": "mqtt in",
        "z": "5b3b16f7b12de95a",
        "name": "on detected krumblor",
        "topic": "beholder/occipital/+/detected_objects/images%2Fkrumblor",
        "qos": "1",
        "datatype": "json",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 1140,
        "y": 380,
        "wires": [
            [
                "149fad70712e599e",
                "116f874821b08eec"
            ]
        ]
    },
    {
        "id": "149fad70712e599e",
        "type": "rbe",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "func": "rbei",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload.data.length",
        "topi": "topic",
        "x": 1330,
        "y": 380,
        "wires": [
            [
                "4f0a833d073149cb"
            ]
        ]
    },
    {
        "id": "4f0a833d073149cb",
        "type": "switch",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "property": "payload.data.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1450,
        "y": 380,
        "wires": [
            [
                "68984d7a5f586bc3"
            ],
            [
                "670f091eaebbe2fb"
            ]
        ]
    },
    {
        "id": "670f091eaebbe2fb",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "> 0 - set TTS msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "krumblor has blessed us with his presence",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1610,
        "y": 400,
        "wires": [
            [
                "590322f6254633aa"
            ]
        ]
    },
    {
        "id": "68984d7a5f586bc3",
        "type": "change",
        "z": "5b3b16f7b12de95a",
        "name": "<= 0 - set TTS msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "krumblor has left us",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1610,
        "y": 360,
        "wires": [
            [
                "590322f6254633aa"
            ]
        ]
    },
    {
        "id": "590322f6254633aa",
        "type": "link out",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "links": [
            "1cbae375d3f7ea9d"
        ],
        "x": 1755,
        "y": 380,
        "wires": []
    },
    {
        "id": "4220775b8e14d975",
        "type": "mqtt in",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "topic": "beholder/eye/+/region/cookie",
        "qos": "1",
        "datatype": "json",
        "broker": "0b70dd4da53f0867",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 160,
        "y": 1540,
        "wires": [
            [
                "fd06cc09f8b0d126",
                "6141fa170dc1383c"
            ]
        ]
    },
    {
        "id": "3682828fea8ab6fd",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "create focus region request for cookie",
        "func": "const payload = msg.payload;\nflow.set(\"cookie_clicker_process\", payload.data)\n\nreturn {\n    payload: {\n        name: \"cookie\",\n        kind: \"image\",\n        bitmapSettings: {\n            x: payload.data.windowPosition.x,\n            y: payload.data.windowPosition.y + 290,\n            width: 575,\n            height: 750,\n            updateRateMs: 10000\n        }\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1640,
        "wires": [
            [
                "21d416d2262f1804"
            ]
        ]
    },
    {
        "id": "116f874821b08eec",
        "type": "function",
        "z": "5b3b16f7b12de95a",
        "name": "krumblor?",
        "func": "const payload = msg.payload;\n\nif (payload.data.length > 0) {\n    node.status({fill: 'green', text: payload.data.length});\n} else {\n    node.status({fill: 'red', text: payload.data.length});\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "9f0db2819d159188",
        "type": "delay",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "pauseType": "rate",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "x": 920,
        "y": 1440,
        "wires": [
            [
                "b49d7b6a308c9aef"
            ]
        ]
    },
    {
        "id": "b49d7b6a308c9aef",
        "type": "delay",
        "z": "5b3b16f7b12de95a",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 1080,
        "y": 1440,
        "wires": [
            [
                "af0a11e51ba54932"
            ]
        ]
    },
    {
        "id": "73cdb3bb27e53215",
        "type": "debug",
        "z": "13065b3553c3ca8f",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 380,
        "wires": []
    }
]