version: "2.4"

services:
  ###############################################
  # Beholder Cortex
  beholder-cortex:
    image: beholderrpa/cortex:rpi
    container_name: beholder-cortex
    restart: always
    build:
      context: ./beholder-cortex
      dockerfile: Dockerfile
    networks:
      - backend
    labels: 
      - traefik.enable=true
      - traefik.http.routers.cortex.rule=Host(`${BEHOLDER_CORTEX_HOSTNAME}`)
      - traefik.http.routers.cortex.entrypoints=websecure
      - traefik.http.routers.cortex.tls=true
      - traefik.http.services.cortex.loadbalancer.server.port=3000
  # Dapr Sidecar
  beholder-cortex-dapr:
    image: daprio/daprd
    container_name: beholder-cortex-dapr
    restart: always
    command: ["./daprd",
    "-app-id", "cortex",
    "-app-port", "3000",
    "-dapr-http-max-request-size", "16",
    "-placement-host-address", "beholder-dapr-placement:50006",
    "-components-path", "/dapr/components",
    "-config", "/dapr/config.yaml"]
    volumes:
      - "./beholder-dapr/:/dapr"
    depends_on:
      - beholder-cortex
    network_mode: "service:beholder-cortex"
  ###############################################
  # Beholder Nexus
  beholder-nexus:
    image: rabbitmq:management
    container_name: beholder-nexus
    restart: always
    expose: 
      # Management Port
      - 15672
      # Amqp Port
      - 5672
      # MQTT Port
      - 1883
      # MQTT Web Port
      - 15675  
    networks:
      - backend
    labels:
      - traefik.enable=true
      # Proxy to authenticated content
      - traefik.http.routers.beholder_nexus.rule=Host(`${BEHOLDER_NEXUS_HOSTNAME}`)
      - traefik.http.routers.beholder_nexus.entrypoints=websecure
      - traefik.http.routers.beholder_nexus.tls=true
      - traefik.http.routers.beholder_nexus.service=beholder_nexus
      - traefik.http.services.beholder_nexus.loadbalancer.server.port=15672
      # Proxy mqtt web sockets
      - traefik.http.middlewares.beholder_nexus_mqtt_ws_stripprefixregex.stripprefixregex.regex=/nexus/
      - traefik.http.routers.beholder_nexus_mqtt_ws.rule=Host(`${BEHOLDER_CORTEX_HOSTNAME}`) && PathPrefix(`/nexus`)
      - traefik.http.routers.beholder_nexus_mqtt_ws.entrypoints=websecure
      - traefik.http.routers.beholder_nexus_mqtt_ws.tls=true
      - traefik.http.routers.beholder_nexus_mqtt_ws.middlewares=beholder_nexus_mqtt_ws_stripprefixregex
      - traefik.http.routers.beholder_nexus_mqtt_ws.service=beholder_nexus_mqtt_ws
      - traefik.http.services.beholder_nexus_mqtt_ws.loadbalancer.server.port=15675
      # Proxy mqtt
      - traefik.tcp.routers.beholder_nexus_mqtt.rule=HostSNI(`${BEHOLDER_NEXUS_HOSTNAME}`)
      - traefik.tcp.routers.beholder_nexus_mqtt.entrypoints=mqtt
      - traefik.tcp.services.beholder_nexus_mqtt.loadbalancer.server.port=1883
    volumes: 
      - ./beholder-nexus:/etc/rabbitmq
  ###############################################
  # Beholder Stalk
  beholder-stalk:
    image: beholderrpa/stalk:rpi
    container_name: beholder-stalk
    restart: always
    build:
      context: ./beholder-stalk
      dockerfile: Dockerfile
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    environment:
      - beholder_stalk_clientid=stalk-01
      - beholder_nexus_url=ws://beholder-nexus:15675/ws
      - beholder_nexus_username=guest
      - beholder_nexus_password=guest
      - beholder_stalk_keymin=40
      - beholder_stalk_keymax=80
    networks:
      - backend
    depends_on:
      - beholder-nexus
  ###############################################
  # Beholder Grafana
  beholder-grafana:
    image: beholderrpa/grafana:rpi
    container_name: beholder-grafana
    build:
      context: ./beholder-grafana
      dockerfile: Dockerfile
    restart: always
    environment:
      GF_LOG_MODE: console
    networks:
      - backend
    volumes:
      - beholder_grafana_data:/var/lib/grafana
  ###############################################
  # Beholder Postgres
  beholder-postgres:
    image: beholderrpa/postgres:rpi
    container_name: beholder-postgres
    restart: always
    build:
      context: ./beholder-postgres
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: beholder
      POSTGRES_PASSWORD: beholder
      PGDATA: /var/lib/postgresql/data/pgdata
    networks:
      - backend
    volumes:
      - beholder_postgres_data:/var/lib/postgresql/data
  ###############################################
  # Beholder Redis
  beholder-redis:
    image: redis
    container_name: beholder-redis
    restart: always
    networks:
      - backend
    volumes:
      - beholder_redis_data:/data
    labels:
      - traefik.enable=true
      # Proxy redis
      - traefik.tcp.routers.beholder_redis.rule=HostSNI(`${BEHOLDER_NEXUS_HOSTNAME}`)
      - traefik.tcp.routers.beholder_redis.entrypoints=redis
      - traefik.tcp.services.beholder_redis.loadbalancer.server.port=6379
  ###############################################
  # Dapr placement service
  beholder-dapr-placement:
    image: daprio/dapr
    container_name: beholder-dapr-placement
    restart: always
    command: ["./placement", "-port", "50006"]
    networks:
      - backend
  ###############################################
  # Beholder Reverse Proxy
  beholder-traefik:
    image: traefik:v2.4
    container_name: beholder-traefik
    restart: always
    ports:
      - 80:80
      - 443:443
    networks:
      - frontend
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

networks:
  frontend:
  backend:

volumes:
  beholder_redis_data:
  beholder_postgres_data:
  beholder_grafana_data:
