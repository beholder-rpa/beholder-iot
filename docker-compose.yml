version: "2.4"

x-dapr:
  &default-dapr
  image: daprio/daprd:edge
  restart: always
  volumes:
    - ./beholder-dapr/:/dapr:ro
    
services:
  ###############################################
  # Beholder Cortex
  beholder-cortex:
    image: beholderrpa/iot-cortex
    container_name: beholder-cortex
    restart: always
    networks:
      - backend
    labels: 
      - traefik.enable=true
      - traefik.http.routers.cortex.rule=Host(`${BEHOLDER_CORTEX_HOSTNAME}`)
      - traefik.http.routers.cortex.entrypoints=websecure
      - traefik.http.routers.cortex.tls=true
      - traefik.http.services.cortex.loadbalancer.server.port=3000
  # Dapr Sidecar
  beholder-cortex-dapr:
    << : *default-dapr
    container_name: beholder-cortex-dapr
    command: ["./daprd",
      "-app-id", "cortex",
      "-app-port", "3000",
      "-dapr-http-max-request-size", "16",
      "-placement-host-address", "beholder-dapr-placement:50006",
      "-components-path", "/dapr/components",
      "-config", "/dapr/config.yaml"]
    depends_on:
      - beholder-cortex
      - beholder-nexus
    network_mode: "service:beholder-cortex"
  ###############################################
  # Beholder Frontal Lobe (Node Red)
  beholder-node-red:
    image: nodered/node-red:latest
    container_name: beholder-node-red
    restart: always
    environment:
      - BEHOLDER_STALK_NAME=${BEHOLDER_SHORT_HOSTNAME}
    networks:
      - backend
    volumes:
      - ./beholder-node-red/data:/data
    labels:
      - traefik.enable=true
      # Proxy to authenticated content
      - traefik.http.routers.beholder_node_red.rule=Host(`${BEHOLDER_NODERED_HOSTNAME}`)
      - traefik.http.routers.beholder_node_red.entrypoints=websecure
      - traefik.http.routers.beholder_node_red.tls=true
      - traefik.http.routers.beholder_node_red.service=beholder_node_red
      - traefik.http.services.beholder_node_red.loadbalancer.server.port=1880
  # Dapr Sidecar
  beholder-node-red-dapr:
    << : *default-dapr
    container_name: beholder-node-red-dapr
    command: ["./daprd",
      "-app-id", "node-red",
      "-app-port", "1880",
      "-dapr-http-max-request-size", "16",
      "-placement-host-address", "beholder-dapr-placement:50006",
      "-components-path", "/dapr/components",
      "-config", "/dapr/config.yaml"]
    depends_on:
      - beholder-node-red
      - beholder-nexus
    network_mode: "service:beholder-node-red"
  ###############################################
  # Beholder Nexus
  beholder-nexus:
    image: emqx/emqx:4.3.5
    container_name: beholder-nexus
    restart: always
    expose: 
      # Dashboard Port
      - 18083
      # Emqx Port
      - 11883
      # MQTT Port
      - 1883
      # MQTT SSL Port
      - 8883
      # MQTT Web Sockets Port
      - 8083
      # MQTT Web Sockets Secure Port
      - 8084
    networks:
      - backend
    labels:
      - traefik.enable=true
      # Proxy to authenticated content
      - traefik.http.routers.beholder_nexus.rule=Host(`${BEHOLDER_NEXUS_HOSTNAME}`)
      - traefik.http.routers.beholder_nexus.entrypoints=websecure
      - traefik.http.routers.beholder_nexus.tls=true
      - traefik.http.routers.beholder_nexus.service=beholder_nexus
      - traefik.http.services.beholder_nexus.loadbalancer.server.port=18083
      # Proxy mqtt web sockets
      - traefik.http.middlewares.beholder_nexus_mqtt_ws_stripprefixregex.stripprefixregex.regex=/nexus/
      - traefik.http.routers.beholder_nexus_mqtt_ws.rule=Host(`${BEHOLDER_CORTEX_HOSTNAME}`) && PathPrefix(`/nexus`)
      - traefik.http.routers.beholder_nexus_mqtt_ws.entrypoints=websecure
      - traefik.http.routers.beholder_nexus_mqtt_ws.tls=true
      - traefik.http.routers.beholder_nexus_mqtt_ws.middlewares=beholder_nexus_mqtt_ws_stripprefixregex
      - traefik.http.routers.beholder_nexus_mqtt_ws.service=beholder_nexus_mqtt_ws
      - traefik.http.services.beholder_nexus_mqtt_ws.loadbalancer.server.port=8083
      # Proxy mqtt
      - traefik.tcp.routers.beholder_nexus_mqtt.rule=HostSNI(`${BEHOLDER_NEXUS_HOSTNAME}`)
      - traefik.tcp.routers.beholder_nexus_mqtt.entrypoints=mqtt
      - traefik.tcp.services.beholder_nexus_mqtt.loadbalancer.server.port=1883
    volumes: 
      - ./beholder-nexus:/etc/rabbitmq
  ###############################################
  # Beholder Stalk
  beholder-stalk:
    image: beholderrpa/iot-stalk-v2
    container_name: beholder-stalk
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    environment:
      - BEHOLDER_STALK_NAME=${BEHOLDER_SHORT_HOSTNAME}
      - beholder_stalk_keymin=40
      - beholder_stalk_keymax=80
    networks:
      - backend
    depends_on:
      - beholder-nexus
  # Dapr Sidecar
  beholder-stalk-dapr:
    << : *default-dapr
    container_name: beholder-stalk-dapr
    command: ["./daprd",
      "-app-id", "stalk",
      "-app-port", "80",
      "--app-protocol", "grpc",
      "-dapr-http-max-request-size", "16",
      "-placement-host-address", "beholder-dapr-placement:50006",
      "-components-path", "/dapr/components",
      "-config", "/dapr/config.yaml"]
    depends_on:
      - beholder-stalk
      - beholder-nexus
    network_mode: "service:beholder-stalk"
  ###############################################
  # Beholder Grafana
  beholder-grafana:
    image: grafana/grafana
    container_name: beholder-grafana
    restart: always
    environment:
      GF_LOG_MODE: console
    networks:
      - backend
    volumes:
      - ./beholder-grafana:/etc/grafana/:ro
      - beholder_grafana_data:/var/lib/grafana
    labels: 
      - traefik.enable=true
      # Proxy to authenticated content
      - traefik.http.routers.beholder_grafana.rule=Host(`${BEHOLDER_GRAFANA_HOSTNAME}`)
      - traefik.http.routers.beholder_grafana.entrypoints=websecure
      - traefik.http.routers.beholder_grafana.tls=true
      - traefik.http.services.beholder_grafana.loadbalancer.server.port=3000
  ###############################################
  # Beholder Postgres
  beholder-postgres:
    image: postgres
    container_name: beholder-postgres
    restart: always
    environment:
      POSTGRES_USER: beholder
      POSTGRES_PASSWORD: beholder
      PGDATA: /var/lib/postgresql/data/pgdata
    networks:
      - backend
    volumes:
      - ./beholder-postgres/initdb/:/docker-entrypoint-initdb.d/:ro
      - beholder_postgres_data:/var/lib/postgresql/data
  ###############################################
  # Beholder Redis
  beholder-redis:
    image: redis
    container_name: beholder-redis
    restart: always
    networks:
      - backend
    volumes:
      - beholder_redis_data:/data
    labels:
      - traefik.enable=true
      # Proxy redis
      - traefik.tcp.routers.beholder_redis.rule=HostSNI(`${BEHOLDER_NEXUS_HOSTNAME}`)
      - traefik.tcp.routers.beholder_redis.entrypoints=redis
      - traefik.tcp.services.beholder_redis.loadbalancer.server.port=6379
  ###############################################
  # Dapr placement service
  beholder-dapr-placement:
    image: daprio/dapr
    container_name: beholder-dapr-placement
    restart: always
    command: ["./placement", "-port", "50006"]
    networks:
      - backend
  ###############################################
  # Beholder Reverse Proxy
  beholder-traefik:
    image: traefik:v2.4
    container_name: beholder-traefik
    restart: always
    command:
      - "--global.checkNewVersion=true"
      - "--global.sendAnonymousUsage=false"
      - "--api.dashboard=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.amqp.address=:5672"
      - "--entrypoints.mqtt.address=:1883"
      - "--entrypoints.redis.address=:6379"
      - "--providers.file.filename=/etc/traefik/conf/dynamic_conf.yml"
      - "--providers.docker.exposedbydefault=false"
    ports:
      - 80:80
      - 443:443
    networks:
      - frontend
      - backend
    volumes:
      - ./beholder-traefik/certs:/etc/traefik/certs/:ro
      - ./beholder-traefik/conf:/etc/traefik/conf/:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro

networks:
  frontend:
  backend:

volumes:
  beholder_redis_data:
  beholder_postgres_data:
  beholder_grafana_data:
